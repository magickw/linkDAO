apiVersion: v1
kind: ConfigMap
metadata:
  name: high-traffic-scaling-config
  namespace: web3-marketplace-prod
data:
  scaling-rules.yaml: |
    scalingRules:
      traffic_thresholds:
        low: 1000      # requests per minute
        medium: 5000   # requests per minute
        high: 15000    # requests per minute
        extreme: 50000 # requests per minute
        
      scaling_policies:
        predictive:
          enabled: true
          look_ahead_minutes: 30
          confidence_threshold: 0.8
          
        reactive:
          enabled: true
          scale_up_threshold: 0.7
          scale_down_threshold: 0.3
          cooldown_period: 300
          
        scheduled:
          enabled: true
          peak_hours:
            - start: "08:00"
              end: "10:00"
              timezone: "UTC"
              scale_factor: 1.5
            - start: "18:00"
              end: "22:00"
              timezone: "UTC"
              scale_factor: 2.0
              
      resource_allocation:
        cpu_intensive_workloads:
          - image_processing
          - video_transcoding
          - blockchain_validation
          
        memory_intensive_workloads:
          - large_dataset_processing
          - ml_inference
          - cache_warming
          
        io_intensive_workloads:
          - database_operations
          - file_uploads
          - backup_operations
          
      circuit_breaker:
        enabled: true
        failure_threshold: 5
        timeout: 30000
        reset_timeout: 60000
        
      load_balancing:
        algorithm: "weighted_round_robin"
        health_check_interval: 10
        unhealthy_threshold: 3
        
      monitoring:
        metrics:
          - request_rate
          - response_time
          - error_rate
          - cpu_usage
          - memory_usage
          - disk_io
          - network_io
        alerts:
          high_error_rate: 0.05
          high_response_time: 2000
          resource_exhaustion: 0.90
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: extreme-traffic-hpa
  namespace: web3-marketplace-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 5
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "50"
  - type: External
    external:
      metric:
        name: queue_depth
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 10
        periodSeconds: 120
      - type: Pods
        value: 2
        periodSeconds: 120
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 10
        periodSeconds: 30
      selectPolicy: Max
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-predictor
  namespace: web3-marketplace-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: traffic-predictor
  template:
    metadata:
      labels:
        app: traffic-predictor
    spec:
      containers:
      - name: predictor
        image: web3marketplace/traffic-predictor:latest
        ports:
        - containerPort: 8082
        env:
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        - name: GRAFANA_URL
          value: "http://grafana:3000"
        - name: ML_MODEL_PATH
          value: "/app/models/traffic_prediction_model.pkl"
        volumeMounts:
        - name: ml-models
          mountPath: /app/models
        - name: config
          mountPath: /app/config
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: config
        configMap:
          name: high-traffic-scaling-config
---
apiVersion: v1
kind: Service
metadata:
  name: traffic-predictor-service
  namespace: web3-marketplace-prod
spec:
  selector:
    app: traffic-predictor
  ports:
  - port: 80
    targetPort: 8082
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-balancer-controller
  namespace: web3-marketplace-prod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: load-balancer-controller
  template:
    metadata:
      labels:
        app: load-balancer-controller
    spec:
      containers:
      - name: controller
        image: web3marketplace/load-balancer-controller:latest
        ports:
        - containerPort: 8083
        env:
        - name: KUBERNETES_API_URL
          value: "https://kubernetes.default.svc"
        - name: TRAFFIC_PREDICTOR_URL
          value: "http://traffic-predictor-service"
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        volumeMounts:
        - name: config
          mountPath: /app/config
        - name: kube-config
          mountPath: /app/kube
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8083
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: high-traffic-scaling-config
      - name: kube-config
        secret:
          secretName: kube-config-secret
      serviceAccountName: load-balancer-controller-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: load-balancer-controller-sa
  namespace: web3-marketplace-prod
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: load-balancer-controller-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: load-balancer-controller-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: load-balancer-controller-role
subjects:
- kind: ServiceAccount
  name: load-balancer-controller-sa
  namespace: web3-marketplace-prod