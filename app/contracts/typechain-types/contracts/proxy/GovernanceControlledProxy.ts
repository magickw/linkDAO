/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface GovernanceControlledProxyInterface extends utils.Interface {
  functions: {
    "MAX_TIMELOCK()": FunctionFragment;
    "MIN_TIMELOCK()": FunctionFragment;
    "canExecuteUpgrade()": FunctionFragment;
    "cancelUpgrade()": FunctionFragment;
    "cancelUpgradeVote(uint256)": FunctionFragment;
    "castUpgradeVote(uint256,bool)": FunctionFragment;
    "changeGovernance(address)": FunctionFragment;
    "currentUpgradeProposal()": FunctionFragment;
    "currentVoteId()": FunctionFragment;
    "emergencyPause()": FunctionFragment;
    "executeUpgrade()": FunctionFragment;
    "executeUpgradeVote(uint256)": FunctionFragment;
    "getImplementation()": FunctionFragment;
    "getUpgradeProposal()": FunctionFragment;
    "getUpgradeVote(uint256)": FunctionFragment;
    "getVoteChoice(uint256,address)": FunctionFragment;
    "governance()": FunctionFragment;
    "hasVotePassed(uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "proposeUpgrade(address,string)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "quorumBasisPoints()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUpgradeTimelock(uint256)": FunctionFragment;
    "startUpgradeVote(address,string)": FunctionFragment;
    "timeUntilUpgrade()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateVotingParameters(uint256,uint256)": FunctionFragment;
    "upgradeTimelock()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "upgradeVotes(uint256)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_TIMELOCK"
      | "MIN_TIMELOCK"
      | "canExecuteUpgrade"
      | "cancelUpgrade"
      | "cancelUpgradeVote"
      | "castUpgradeVote"
      | "changeGovernance"
      | "currentUpgradeProposal"
      | "currentVoteId"
      | "emergencyPause"
      | "executeUpgrade"
      | "executeUpgradeVote"
      | "getImplementation"
      | "getUpgradeProposal"
      | "getUpgradeVote"
      | "getVoteChoice"
      | "governance"
      | "hasVotePassed"
      | "hasVoted"
      | "owner"
      | "paused"
      | "proposeUpgrade"
      | "proxiableUUID"
      | "quorumBasisPoints"
      | "renounceOwnership"
      | "setUpgradeTimelock"
      | "startUpgradeVote"
      | "timeUntilUpgrade"
      | "transferOwnership"
      | "unpause"
      | "updateVotingParameters"
      | "upgradeTimelock"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "upgradeVotes"
      | "votingPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_TIMELOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TIMELOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpgradeVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "castUpgradeVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentUpgradeProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentVoteId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgradeVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradeProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradeVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteChoice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotePassed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeUpgrade",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradeTimelock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startUpgradeVote",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeUntilUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateVotingParameters",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TIMELOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TIMELOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpgradeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castUpgradeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentUpgradeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentVoteId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgradeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasVotePassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradeTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startUpgradeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "GovernanceChanged(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpgradeCancelled(address)": EventFragment;
    "UpgradeExecuted(address)": EventFragment;
    "UpgradeProposed(address,uint256)": EventFragment;
    "UpgradeVoteCancelled(uint256)": EventFragment;
    "UpgradeVoteExecuted(uint256,address)": EventFragment;
    "UpgradeVoteStarted(uint256,address,uint256,string)": EventFragment;
    "Upgraded(address)": EventFragment;
    "VoteCast(uint256,address,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeVoteCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeVoteExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeVoteStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface GovernanceChangedEventObject {
  oldGovernance: string;
  newGovernance: string;
}
export type GovernanceChangedEvent = TypedEvent<
  [string, string],
  GovernanceChangedEventObject
>;

export type GovernanceChangedEventFilter =
  TypedEventFilter<GovernanceChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradeCancelledEventObject {
  proposedImplementation: string;
}
export type UpgradeCancelledEvent = TypedEvent<
  [string],
  UpgradeCancelledEventObject
>;

export type UpgradeCancelledEventFilter =
  TypedEventFilter<UpgradeCancelledEvent>;

export interface UpgradeExecutedEventObject {
  newImplementation: string;
}
export type UpgradeExecutedEvent = TypedEvent<
  [string],
  UpgradeExecutedEventObject
>;

export type UpgradeExecutedEventFilter = TypedEventFilter<UpgradeExecutedEvent>;

export interface UpgradeProposedEventObject {
  newImplementation: string;
  executeAfter: BigNumber;
}
export type UpgradeProposedEvent = TypedEvent<
  [string, BigNumber],
  UpgradeProposedEventObject
>;

export type UpgradeProposedEventFilter = TypedEventFilter<UpgradeProposedEvent>;

export interface UpgradeVoteCancelledEventObject {
  voteId: BigNumber;
}
export type UpgradeVoteCancelledEvent = TypedEvent<
  [BigNumber],
  UpgradeVoteCancelledEventObject
>;

export type UpgradeVoteCancelledEventFilter =
  TypedEventFilter<UpgradeVoteCancelledEvent>;

export interface UpgradeVoteExecutedEventObject {
  voteId: BigNumber;
  newImplementation: string;
}
export type UpgradeVoteExecutedEvent = TypedEvent<
  [BigNumber, string],
  UpgradeVoteExecutedEventObject
>;

export type UpgradeVoteExecutedEventFilter =
  TypedEventFilter<UpgradeVoteExecutedEvent>;

export interface UpgradeVoteStartedEventObject {
  voteId: BigNumber;
  proposedImplementation: string;
  votingEnds: BigNumber;
  description: string;
}
export type UpgradeVoteStartedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  UpgradeVoteStartedEventObject
>;

export type UpgradeVoteStartedEventFilter =
  TypedEventFilter<UpgradeVoteStartedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VoteCastEventObject {
  voteId: BigNumber;
  voter: string;
  support: boolean;
  votingPower: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface GovernanceControlledProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceControlledProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_TIMELOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_TIMELOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    canExecuteUpgrade(overrides?: CallOverrides): Promise<[boolean]>;

    cancelUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentUpgradeProposal(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        newImplementation: string;
        proposedAt: BigNumber;
        executeAfter: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    currentVoteId(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<[string]>;

    getUpgradeProposal(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        newImplementation: string;
        proposedAt: BigNumber;
        executeAfter: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    getUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string
      ] & {
        proposedImplementation: string;
        votingStarted: BigNumber;
        votingEnds: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        totalVotingPower: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    getVoteChoice(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    hasVotePassed(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasVoted(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proposeUpgrade(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    quorumBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpgradeTimelock(
      newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startUpgradeVote(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeUntilUpgrade(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVotingParameters(
      newVotingPeriod: PromiseOrValue<BigNumberish>,
      newQuorumBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeVotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string
      ] & {
        proposalId: BigNumber;
        proposedImplementation: string;
        votingStarted: BigNumber;
        votingEnds: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        totalVotingPower: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

  canExecuteUpgrade(overrides?: CallOverrides): Promise<boolean>;

  cancelUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelUpgradeVote(
    voteId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castUpgradeVote(
    voteId: PromiseOrValue<BigNumberish>,
    support: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeGovernance(
    newGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentUpgradeProposal(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, boolean, string] & {
      newImplementation: string;
      proposedAt: BigNumber;
      executeAfter: BigNumber;
      executed: boolean;
      cancelled: boolean;
      description: string;
    }
  >;

  currentVoteId(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUpgradeVote(
    voteId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getImplementation(overrides?: CallOverrides): Promise<string>;

  getUpgradeProposal(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, boolean, string] & {
      newImplementation: string;
      proposedAt: BigNumber;
      executeAfter: BigNumber;
      executed: boolean;
      cancelled: boolean;
      description: string;
    }
  >;

  getUpgradeVote(
    voteId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      string
    ] & {
      proposedImplementation: string;
      votingStarted: BigNumber;
      votingEnds: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      totalVotingPower: BigNumber;
      executed: boolean;
      cancelled: boolean;
      description: string;
    }
  >;

  getVoteChoice(
    voteId: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governance(overrides?: CallOverrides): Promise<string>;

  hasVotePassed(
    voteId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasVoted(
    voteId: PromiseOrValue<BigNumberish>,
    voter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proposeUpgrade(
    newImplementation: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  quorumBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpgradeTimelock(
    newTimelock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startUpgradeVote(
    newImplementation: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeUntilUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVotingParameters(
    newVotingPeriod: PromiseOrValue<BigNumberish>,
    newQuorumBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeVotes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      string
    ] & {
      proposalId: BigNumber;
      proposedImplementation: string;
      votingStarted: BigNumber;
      votingEnds: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      totalVotingPower: BigNumber;
      executed: boolean;
      cancelled: boolean;
      description: string;
    }
  >;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    canExecuteUpgrade(overrides?: CallOverrides): Promise<boolean>;

    cancelUpgrade(overrides?: CallOverrides): Promise<void>;

    cancelUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    castUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentUpgradeProposal(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        newImplementation: string;
        proposedAt: BigNumber;
        executeAfter: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    currentVoteId(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyPause(overrides?: CallOverrides): Promise<void>;

    executeUpgrade(overrides?: CallOverrides): Promise<void>;

    executeUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getImplementation(overrides?: CallOverrides): Promise<string>;

    getUpgradeProposal(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        newImplementation: string;
        proposedAt: BigNumber;
        executeAfter: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    getUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string
      ] & {
        proposedImplementation: string;
        votingStarted: BigNumber;
        votingEnds: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        totalVotingPower: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    getVoteChoice(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governance(overrides?: CallOverrides): Promise<string>;

    hasVotePassed(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasVoted(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proposeUpgrade(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    quorumBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUpgradeTimelock(
      newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startUpgradeVote(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeUntilUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateVotingParameters(
      newVotingPeriod: PromiseOrValue<BigNumberish>,
      newQuorumBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeVotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string
      ] & {
        proposalId: BigNumber;
        proposedImplementation: string;
        votingStarted: BigNumber;
        votingEnds: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        totalVotingPower: BigNumber;
        executed: boolean;
        cancelled: boolean;
        description: string;
      }
    >;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "GovernanceChanged(address,address)"(
      oldGovernance?: PromiseOrValue<string> | null,
      newGovernance?: PromiseOrValue<string> | null
    ): GovernanceChangedEventFilter;
    GovernanceChanged(
      oldGovernance?: PromiseOrValue<string> | null,
      newGovernance?: PromiseOrValue<string> | null
    ): GovernanceChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpgradeCancelled(address)"(
      proposedImplementation?: PromiseOrValue<string> | null
    ): UpgradeCancelledEventFilter;
    UpgradeCancelled(
      proposedImplementation?: PromiseOrValue<string> | null
    ): UpgradeCancelledEventFilter;

    "UpgradeExecuted(address)"(
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradeExecutedEventFilter;
    UpgradeExecuted(
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradeExecutedEventFilter;

    "UpgradeProposed(address,uint256)"(
      newImplementation?: PromiseOrValue<string> | null,
      executeAfter?: null
    ): UpgradeProposedEventFilter;
    UpgradeProposed(
      newImplementation?: PromiseOrValue<string> | null,
      executeAfter?: null
    ): UpgradeProposedEventFilter;

    "UpgradeVoteCancelled(uint256)"(
      voteId?: PromiseOrValue<BigNumberish> | null
    ): UpgradeVoteCancelledEventFilter;
    UpgradeVoteCancelled(
      voteId?: PromiseOrValue<BigNumberish> | null
    ): UpgradeVoteCancelledEventFilter;

    "UpgradeVoteExecuted(uint256,address)"(
      voteId?: PromiseOrValue<BigNumberish> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradeVoteExecutedEventFilter;
    UpgradeVoteExecuted(
      voteId?: PromiseOrValue<BigNumberish> | null,
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradeVoteExecutedEventFilter;

    "UpgradeVoteStarted(uint256,address,uint256,string)"(
      voteId?: PromiseOrValue<BigNumberish> | null,
      proposedImplementation?: PromiseOrValue<string> | null,
      votingEnds?: null,
      description?: null
    ): UpgradeVoteStartedEventFilter;
    UpgradeVoteStarted(
      voteId?: PromiseOrValue<BigNumberish> | null,
      proposedImplementation?: PromiseOrValue<string> | null,
      votingEnds?: null,
      description?: null
    ): UpgradeVoteStartedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "VoteCast(uint256,address,bool,uint256)"(
      voteId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      support?: null,
      votingPower?: null
    ): VoteCastEventFilter;
    VoteCast(
      voteId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      support?: null,
      votingPower?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    MAX_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TIMELOCK(overrides?: CallOverrides): Promise<BigNumber>;

    canExecuteUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    cancelUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentUpgradeProposal(overrides?: CallOverrides): Promise<BigNumber>;

    currentVoteId(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgradeProposal(overrides?: CallOverrides): Promise<BigNumber>;

    getUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteChoice(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotePassed(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proposeUpgrade(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    quorumBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpgradeTimelock(
      newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startUpgradeVote(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeUntilUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVotingParameters(
      newVotingPeriod: PromiseOrValue<BigNumberish>,
      newQuorumBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeVotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TIMELOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_TIMELOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canExecuteUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentUpgradeProposal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentVoteId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpgradeProposal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpgradeVote(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteChoice(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasVotePassed(
      voteId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      voteId: PromiseOrValue<BigNumberish>,
      voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeUpgrade(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradeTimelock(
      newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startUpgradeVote(
      newImplementation: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeUntilUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingParameters(
      newVotingPeriod: PromiseOrValue<BigNumberish>,
      newQuorumBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTimelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeVotes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
