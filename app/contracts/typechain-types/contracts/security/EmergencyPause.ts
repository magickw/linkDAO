/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace EmergencyPause {
  export type EmergencySettingsStruct = {
    pauseDelay: PromiseOrValue<BigNumberish>;
    unpauseDelay: PromiseOrValue<BigNumberish>;
    maxPauseDuration: PromiseOrValue<BigNumberish>;
    emergencyPauseEnabled: PromiseOrValue<boolean>;
  };

  export type EmergencySettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    pauseDelay: BigNumber;
    unpauseDelay: BigNumber;
    maxPauseDuration: BigNumber;
    emergencyPauseEnabled: boolean;
  };
}

export interface EmergencyPauseInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EMERGENCY_ROLE()": FunctionFragment;
    "GUARDIAN_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "canExecutePause(uint256)": FunctionFragment;
    "canExecuteUnpause(uint256)": FunctionFragment;
    "cancelPauseRequest(uint256)": FunctionFragment;
    "cancelUnpauseRequest(uint256)": FunctionFragment;
    "emergencyPause(string)": FunctionFragment;
    "emergencySettings()": FunctionFragment;
    "executePause(uint256)": FunctionFragment;
    "executeUnpause(uint256)": FunctionFragment;
    "getPauseRequest(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUnpauseRequest(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "guardianUnpause(string)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isPausedTooLong()": FunctionFragment;
    "pauseRequestCount()": FunctionFragment;
    "pauseRequests(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "pausedAt()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestPause(string)": FunctionFragment;
    "requestUnpause(string)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "timeUntilMaxPauseDuration()": FunctionFragment;
    "timeUntilPauseExecution(uint256)": FunctionFragment;
    "timeUntilUnpauseExecution(uint256)": FunctionFragment;
    "unpauseRequestCount()": FunctionFragment;
    "unpauseRequests(uint256)": FunctionFragment;
    "updateEmergencySettings(uint256,uint256,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ROLE"
      | "GUARDIAN_ROLE"
      | "PAUSER_ROLE"
      | "canExecutePause"
      | "canExecuteUnpause"
      | "cancelPauseRequest"
      | "cancelUnpauseRequest"
      | "emergencyPause"
      | "emergencySettings"
      | "executePause"
      | "executeUnpause"
      | "getPauseRequest"
      | "getRoleAdmin"
      | "getUnpauseRequest"
      | "grantRole"
      | "guardianUnpause"
      | "hasRole"
      | "isPausedTooLong"
      | "pauseRequestCount"
      | "pauseRequests"
      | "paused"
      | "pausedAt"
      | "renounceRole"
      | "requestPause"
      | "requestUnpause"
      | "revokeRole"
      | "supportsInterface"
      | "timeUntilMaxPauseDuration"
      | "timeUntilPauseExecution"
      | "timeUntilUnpauseExecution"
      | "unpauseRequestCount"
      | "unpauseRequests"
      | "updateEmergencySettings"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GUARDIAN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canExecutePause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteUnpause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPauseRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUnpauseRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencySettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executePause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUnpause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPauseRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpauseRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "guardianUnpause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPausedTooLong",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseRequestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseRequests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausedAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUnpause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeUntilMaxPauseDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeUntilPauseExecution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeUntilUnpauseExecution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseRequestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseRequests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmergencySettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GUARDIAN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecutePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPauseRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUnpauseRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencySettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPauseRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnpauseRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guardianUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPausedTooLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausedAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilMaxPauseDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilPauseExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilUnpauseExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmergencySettings",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyPauseExecuted(address,string)": EventFragment;
    "EmergencySettingsUpdated(tuple)": EventFragment;
    "PauseExecuted(uint256,address)": EventFragment;
    "PauseRequested(uint256,address,uint256,bool,string)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "UnpauseExecuted(uint256,address)": EventFragment;
    "UnpauseRequested(uint256,address,uint256,string)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyPauseExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencySettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpauseExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpauseRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface EmergencyPauseExecutedEventObject {
  executor: string;
  reason: string;
}
export type EmergencyPauseExecutedEvent = TypedEvent<
  [string, string],
  EmergencyPauseExecutedEventObject
>;

export type EmergencyPauseExecutedEventFilter =
  TypedEventFilter<EmergencyPauseExecutedEvent>;

export interface EmergencySettingsUpdatedEventObject {
  newSettings: EmergencyPause.EmergencySettingsStructOutput;
}
export type EmergencySettingsUpdatedEvent = TypedEvent<
  [EmergencyPause.EmergencySettingsStructOutput],
  EmergencySettingsUpdatedEventObject
>;

export type EmergencySettingsUpdatedEventFilter =
  TypedEventFilter<EmergencySettingsUpdatedEvent>;

export interface PauseExecutedEventObject {
  requestId: BigNumber;
  executor: string;
}
export type PauseExecutedEvent = TypedEvent<
  [BigNumber, string],
  PauseExecutedEventObject
>;

export type PauseExecutedEventFilter = TypedEventFilter<PauseExecutedEvent>;

export interface PauseRequestedEventObject {
  requestId: BigNumber;
  requester: string;
  effectiveTime: BigNumber;
  isEmergency: boolean;
  reason: string;
}
export type PauseRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean, string],
  PauseRequestedEventObject
>;

export type PauseRequestedEventFilter = TypedEventFilter<PauseRequestedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpauseExecutedEventObject {
  requestId: BigNumber;
  executor: string;
}
export type UnpauseExecutedEvent = TypedEvent<
  [BigNumber, string],
  UnpauseExecutedEventObject
>;

export type UnpauseExecutedEventFilter = TypedEventFilter<UnpauseExecutedEvent>;

export interface UnpauseRequestedEventObject {
  requestId: BigNumber;
  requester: string;
  effectiveTime: BigNumber;
  reason: string;
}
export type UnpauseRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  UnpauseRequestedEventObject
>;

export type UnpauseRequestedEventFilter =
  TypedEventFilter<UnpauseRequestedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface EmergencyPause extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EmergencyPauseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    canExecutePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canExecuteUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyPause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencySettings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        pauseDelay: BigNumber;
        unpauseDelay: BigNumber;
        maxPauseDuration: BigNumber;
        emergencyPauseEnabled: boolean;
      }
    >;

    executePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        isEmergency: boolean;
        executed: boolean;
        reason: string;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        executed: boolean;
        reason: string;
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    guardianUnpause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPausedTooLong(overrides?: CallOverrides): Promise<[boolean]>;

    pauseRequestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        isEmergency: boolean;
        executed: boolean;
        reason: string;
      }
    >;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestPause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestUnpause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timeUntilMaxPauseDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeUntilPauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timeUntilUnpauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpauseRequestCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        executed: boolean;
        reason: string;
      }
    >;

    updateEmergencySettings(
      _pauseDelay: PromiseOrValue<BigNumberish>,
      _unpauseDelay: PromiseOrValue<BigNumberish>,
      _maxPauseDuration: PromiseOrValue<BigNumberish>,
      _emergencyPauseEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EMERGENCY_ROLE(overrides?: CallOverrides): Promise<string>;

  GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  canExecutePause(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canExecuteUnpause(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelPauseRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelUnpauseRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyPause(
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencySettings(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      pauseDelay: BigNumber;
      unpauseDelay: BigNumber;
      maxPauseDuration: BigNumber;
      emergencyPauseEnabled: boolean;
    }
  >;

  executePause(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUnpause(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPauseRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, boolean, string] & {
      requester: string;
      requestTime: BigNumber;
      effectiveTime: BigNumber;
      isEmergency: boolean;
      executed: boolean;
      reason: string;
    }
  >;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUnpauseRequest(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, string] & {
      requester: string;
      requestTime: BigNumber;
      effectiveTime: BigNumber;
      executed: boolean;
      reason: string;
    }
  >;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  guardianUnpause(
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPausedTooLong(overrides?: CallOverrides): Promise<boolean>;

  pauseRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

  pauseRequests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, boolean, string] & {
      requester: string;
      requestTime: BigNumber;
      effectiveTime: BigNumber;
      isEmergency: boolean;
      executed: boolean;
      reason: string;
    }
  >;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausedAt(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestPause(
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestUnpause(
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timeUntilMaxPauseDuration(overrides?: CallOverrides): Promise<BigNumber>;

  timeUntilPauseExecution(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timeUntilUnpauseExecution(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpauseRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

  unpauseRequests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, string] & {
      requester: string;
      requestTime: BigNumber;
      effectiveTime: BigNumber;
      executed: boolean;
      reason: string;
    }
  >;

  updateEmergencySettings(
    _pauseDelay: PromiseOrValue<BigNumberish>,
    _unpauseDelay: PromiseOrValue<BigNumberish>,
    _maxPauseDuration: PromiseOrValue<BigNumberish>,
    _emergencyPauseEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<string>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    canExecutePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canExecuteUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyPause(
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencySettings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        pauseDelay: BigNumber;
        unpauseDelay: BigNumber;
        maxPauseDuration: BigNumber;
        emergencyPauseEnabled: boolean;
      }
    >;

    executePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        isEmergency: boolean;
        executed: boolean;
        reason: string;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        executed: boolean;
        reason: string;
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    guardianUnpause(
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPausedTooLong(overrides?: CallOverrides): Promise<boolean>;

    pauseRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

    pauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        isEmergency: boolean;
        executed: boolean;
        reason: string;
      }
    >;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausedAt(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestPause(
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestUnpause(
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timeUntilMaxPauseDuration(overrides?: CallOverrides): Promise<BigNumber>;

    timeUntilPauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeUntilUnpauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string] & {
        requester: string;
        requestTime: BigNumber;
        effectiveTime: BigNumber;
        executed: boolean;
        reason: string;
      }
    >;

    updateEmergencySettings(
      _pauseDelay: PromiseOrValue<BigNumberish>,
      _unpauseDelay: PromiseOrValue<BigNumberish>,
      _maxPauseDuration: PromiseOrValue<BigNumberish>,
      _emergencyPauseEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmergencyPauseExecuted(address,string)"(
      executor?: PromiseOrValue<string> | null,
      reason?: null
    ): EmergencyPauseExecutedEventFilter;
    EmergencyPauseExecuted(
      executor?: PromiseOrValue<string> | null,
      reason?: null
    ): EmergencyPauseExecutedEventFilter;

    "EmergencySettingsUpdated(tuple)"(
      newSettings?: null
    ): EmergencySettingsUpdatedEventFilter;
    EmergencySettingsUpdated(
      newSettings?: null
    ): EmergencySettingsUpdatedEventFilter;

    "PauseExecuted(uint256,address)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null
    ): PauseExecutedEventFilter;
    PauseExecuted(
      requestId?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null
    ): PauseExecutedEventFilter;

    "PauseRequested(uint256,address,uint256,bool,string)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      requester?: PromiseOrValue<string> | null,
      effectiveTime?: null,
      isEmergency?: null,
      reason?: null
    ): PauseRequestedEventFilter;
    PauseRequested(
      requestId?: PromiseOrValue<BigNumberish> | null,
      requester?: PromiseOrValue<string> | null,
      effectiveTime?: null,
      isEmergency?: null,
      reason?: null
    ): PauseRequestedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "UnpauseExecuted(uint256,address)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null
    ): UnpauseExecutedEventFilter;
    UnpauseExecuted(
      requestId?: PromiseOrValue<BigNumberish> | null,
      executor?: PromiseOrValue<string> | null
    ): UnpauseExecutedEventFilter;

    "UnpauseRequested(uint256,address,uint256,string)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      requester?: PromiseOrValue<string> | null,
      effectiveTime?: null,
      reason?: null
    ): UnpauseRequestedEventFilter;
    UnpauseRequested(
      requestId?: PromiseOrValue<BigNumberish> | null,
      requester?: PromiseOrValue<string> | null,
      effectiveTime?: null,
      reason?: null
    ): UnpauseRequestedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    canExecutePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExecuteUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyPause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencySettings(overrides?: CallOverrides): Promise<BigNumber>;

    executePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    guardianUnpause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPausedTooLong(overrides?: CallOverrides): Promise<BigNumber>;

    pauseRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

    pauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausedAt(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestPause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestUnpause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeUntilMaxPauseDuration(overrides?: CallOverrides): Promise<BigNumber>;

    timeUntilPauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeUntilUnpauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseRequestCount(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateEmergencySettings(
      _pauseDelay: PromiseOrValue<BigNumberish>,
      _unpauseDelay: PromiseOrValue<BigNumberish>,
      _maxPauseDuration: PromiseOrValue<BigNumberish>,
      _emergencyPauseEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canExecutePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExecuteUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyPause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencySettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executePause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUnpause(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnpauseRequest(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    guardianUnpause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPausedTooLong(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseRequestCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestPause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestUnpause(
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeUntilMaxPauseDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeUntilPauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeUntilUnpauseExecution(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseRequestCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateEmergencySettings(
      _pauseDelay: PromiseOrValue<BigNumberish>,
      _unpauseDelay: PromiseOrValue<BigNumberish>,
      _maxPauseDuration: PromiseOrValue<BigNumberish>,
      _emergencyPauseEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
