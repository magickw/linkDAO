/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MultiSigWalletInterface extends utils.Interface {
  functions: {
    "MAX_OWNERS()": FunctionFragment;
    "MIN_REQUIRED()": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "batchConfirm(uint256[])": FunctionFragment;
    "canExecuteTransaction(uint256)": FunctionFragment;
    "changeRequiredConfirmations(uint256)": FunctionFragment;
    "changeTimeDelay(uint256)": FunctionFragment;
    "confirmTransaction(uint256)": FunctionFragment;
    "confirmations(uint256,address)": FunctionFragment;
    "emergencyExecute(uint256)": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "getConfirmations(uint256)": FunctionFragment;
    "getExecutableTransactions()": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getPendingTransactions()": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "revokeConfirmation(uint256)": FunctionFragment;
    "settings()": FunctionFragment;
    "submitTransaction(address,uint256,bytes,string)": FunctionFragment;
    "timeUntilExecution(uint256)": FunctionFragment;
    "toggleEmergencyMode()": FunctionFragment;
    "transactionCount()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_OWNERS"
      | "MIN_REQUIRED"
      | "addOwner"
      | "batchConfirm"
      | "canExecuteTransaction"
      | "changeRequiredConfirmations"
      | "changeTimeDelay"
      | "confirmTransaction"
      | "confirmations"
      | "emergencyExecute"
      | "executeTransaction"
      | "getConfirmations"
      | "getExecutableTransactions"
      | "getOwners"
      | "getPendingTransactions"
      | "getTransaction"
      | "isOwner"
      | "owners"
      | "removeOwner"
      | "revokeConfirmation"
      | "settings"
      | "submitTransaction"
      | "timeUntilExecution"
      | "toggleEmergencyMode"
      | "transactionCount"
      | "transactions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_OWNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REQUIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchConfirm",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredConfirmations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTimeDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExecute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutableTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timeUntilExecution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_OWNERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REQUIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchConfirm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTimeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutableTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeUntilExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyModeToggled(bool)": EventFragment;
    "OwnerAdded(address)": EventFragment;
    "OwnerRemoved(address)": EventFragment;
    "RequiredConfirmationsChanged(uint256)": EventFragment;
    "TimeDelayChanged(uint256)": EventFragment;
    "TransactionConfirmed(uint256,address)": EventFragment;
    "TransactionExecuted(uint256)": EventFragment;
    "TransactionRevoked(uint256,address)": EventFragment;
    "TransactionSubmitted(uint256,address,uint256,bytes,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyModeToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequiredConfirmationsChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeDelayChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionSubmitted"): EventFragment;
}

export interface EmergencyModeToggledEventObject {
  enabled: boolean;
}
export type EmergencyModeToggledEvent = TypedEvent<
  [boolean],
  EmergencyModeToggledEventObject
>;

export type EmergencyModeToggledEventFilter =
  TypedEventFilter<EmergencyModeToggledEvent>;

export interface OwnerAddedEventObject {
  owner: string;
}
export type OwnerAddedEvent = TypedEvent<[string], OwnerAddedEventObject>;

export type OwnerAddedEventFilter = TypedEventFilter<OwnerAddedEvent>;

export interface OwnerRemovedEventObject {
  owner: string;
}
export type OwnerRemovedEvent = TypedEvent<[string], OwnerRemovedEventObject>;

export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;

export interface RequiredConfirmationsChangedEventObject {
  required: BigNumber;
}
export type RequiredConfirmationsChangedEvent = TypedEvent<
  [BigNumber],
  RequiredConfirmationsChangedEventObject
>;

export type RequiredConfirmationsChangedEventFilter =
  TypedEventFilter<RequiredConfirmationsChangedEvent>;

export interface TimeDelayChangedEventObject {
  newDelay: BigNumber;
}
export type TimeDelayChangedEvent = TypedEvent<
  [BigNumber],
  TimeDelayChangedEventObject
>;

export type TimeDelayChangedEventFilter =
  TypedEventFilter<TimeDelayChangedEvent>;

export interface TransactionConfirmedEventObject {
  transactionId: BigNumber;
  owner: string;
}
export type TransactionConfirmedEvent = TypedEvent<
  [BigNumber, string],
  TransactionConfirmedEventObject
>;

export type TransactionConfirmedEventFilter =
  TypedEventFilter<TransactionConfirmedEvent>;

export interface TransactionExecutedEventObject {
  transactionId: BigNumber;
}
export type TransactionExecutedEvent = TypedEvent<
  [BigNumber],
  TransactionExecutedEventObject
>;

export type TransactionExecutedEventFilter =
  TypedEventFilter<TransactionExecutedEvent>;

export interface TransactionRevokedEventObject {
  transactionId: BigNumber;
  owner: string;
}
export type TransactionRevokedEvent = TypedEvent<
  [BigNumber, string],
  TransactionRevokedEventObject
>;

export type TransactionRevokedEventFilter =
  TypedEventFilter<TransactionRevokedEvent>;

export interface TransactionSubmittedEventObject {
  transactionId: BigNumber;
  to: string;
  value: BigNumber;
  data: string;
  description: string;
}
export type TransactionSubmittedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  TransactionSubmittedEventObject
>;

export type TransactionSubmittedEventFilter =
  TypedEventFilter<TransactionSubmittedEvent>;

export interface MultiSigWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSigWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_OWNERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_REQUIRED(overrides?: CallOverrides): Promise<[BigNumber]>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchConfirm(
      transactionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canExecuteTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeRequiredConfirmations(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTimeDelay(
      _timeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emergencyExecute(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getExecutableTransactions(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getPendingTransactions(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        to: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        _confirmations: BigNumber;
        createdAt: BigNumber;
        executeAfter: BigNumber;
        description: string;
      }
    >;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        requiredConfirmations: BigNumber;
        timeDelay: BigNumber;
        maxTimeDelay: BigNumber;
        emergencyMode: boolean;
      }
    >;

    submitTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeUntilExecution(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toggleEmergencyMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        to: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        confirmations: BigNumber;
        createdAt: BigNumber;
        executeAfter: BigNumber;
        description: string;
      }
    >;
  };

  MAX_OWNERS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_REQUIRED(overrides?: CallOverrides): Promise<BigNumber>;

  addOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchConfirm(
    transactionIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canExecuteTransaction(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeRequiredConfirmations(
    _required: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTimeDelay(
    _timeDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmTransaction(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmations(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  emergencyExecute(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getConfirmations(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getExecutableTransactions(overrides?: CallOverrides): Promise<BigNumber[]>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  getPendingTransactions(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTransaction(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      to: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      _confirmations: BigNumber;
      createdAt: BigNumber;
      executeAfter: BigNumber;
      description: string;
    }
  >;

  isOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeConfirmation(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settings(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      requiredConfirmations: BigNumber;
      timeDelay: BigNumber;
      maxTimeDelay: BigNumber;
      emergencyMode: boolean;
    }
  >;

  submitTransaction(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeUntilExecution(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toggleEmergencyMode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      to: string;
      value: BigNumber;
      data: string;
      executed: boolean;
      confirmations: BigNumber;
      createdAt: BigNumber;
      executeAfter: BigNumber;
      description: string;
    }
  >;

  callStatic: {
    MAX_OWNERS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REQUIRED(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchConfirm(
      transactionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    canExecuteTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeRequiredConfirmations(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTimeDelay(
      _timeDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyExecute(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getExecutableTransactions(overrides?: CallOverrides): Promise<BigNumber[]>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    getPendingTransactions(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        to: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        _confirmations: BigNumber;
        createdAt: BigNumber;
        executeAfter: BigNumber;
        description: string;
      }
    >;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        requiredConfirmations: BigNumber;
        timeDelay: BigNumber;
        maxTimeDelay: BigNumber;
        emergencyMode: boolean;
      }
    >;

    submitTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timeUntilExecution(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleEmergencyMode(overrides?: CallOverrides): Promise<void>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        to: string;
        value: BigNumber;
        data: string;
        executed: boolean;
        confirmations: BigNumber;
        createdAt: BigNumber;
        executeAfter: BigNumber;
        description: string;
      }
    >;
  };

  filters: {
    "EmergencyModeToggled(bool)"(
      enabled?: null
    ): EmergencyModeToggledEventFilter;
    EmergencyModeToggled(enabled?: null): EmergencyModeToggledEventFilter;

    "OwnerAdded(address)"(
      owner?: PromiseOrValue<string> | null
    ): OwnerAddedEventFilter;
    OwnerAdded(owner?: PromiseOrValue<string> | null): OwnerAddedEventFilter;

    "OwnerRemoved(address)"(
      owner?: PromiseOrValue<string> | null
    ): OwnerRemovedEventFilter;
    OwnerRemoved(
      owner?: PromiseOrValue<string> | null
    ): OwnerRemovedEventFilter;

    "RequiredConfirmationsChanged(uint256)"(
      required?: null
    ): RequiredConfirmationsChangedEventFilter;
    RequiredConfirmationsChanged(
      required?: null
    ): RequiredConfirmationsChangedEventFilter;

    "TimeDelayChanged(uint256)"(newDelay?: null): TimeDelayChangedEventFilter;
    TimeDelayChanged(newDelay?: null): TimeDelayChangedEventFilter;

    "TransactionConfirmed(uint256,address)"(
      transactionId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): TransactionConfirmedEventFilter;
    TransactionConfirmed(
      transactionId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): TransactionConfirmedEventFilter;

    "TransactionExecuted(uint256)"(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): TransactionExecutedEventFilter;
    TransactionExecuted(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): TransactionExecutedEventFilter;

    "TransactionRevoked(uint256,address)"(
      transactionId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): TransactionRevokedEventFilter;
    TransactionRevoked(
      transactionId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): TransactionRevokedEventFilter;

    "TransactionSubmitted(uint256,address,uint256,bytes,string)"(
      transactionId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      description?: null
    ): TransactionSubmittedEventFilter;
    TransactionSubmitted(
      transactionId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      description?: null
    ): TransactionSubmittedEventFilter;
  };

  estimateGas: {
    MAX_OWNERS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REQUIRED(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchConfirm(
      transactionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canExecuteTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeRequiredConfirmations(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTimeDelay(
      _timeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyExecute(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutableTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    submitTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeUntilExecution(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleEmergencyMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_OWNERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_REQUIRED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchConfirm(
      transactionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canExecuteTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeRequiredConfirmations(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTimeDelay(
      _timeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyExecute(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutableTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeUntilExecution(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleEmergencyMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
