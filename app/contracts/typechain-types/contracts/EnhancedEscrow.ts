/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace EnhancedEscrow {
  export type DetailedReputationScoreStruct = {
    totalPoints: PromiseOrValue<BigNumberish>;
    reviewCount: PromiseOrValue<BigNumberish>;
    averageRating: PromiseOrValue<BigNumberish>;
    successfulTransactions: PromiseOrValue<BigNumberish>;
    disputesWon: PromiseOrValue<BigNumberish>;
    disputesLost: PromiseOrValue<BigNumberish>;
    tier: PromiseOrValue<BigNumberish>;
    lastActivityTimestamp: PromiseOrValue<BigNumberish>;
    isSuspended: PromiseOrValue<boolean>;
    suspensionEndTime: PromiseOrValue<BigNumberish>;
  };

  export type DetailedReputationScoreStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    totalPoints: BigNumber;
    reviewCount: BigNumber;
    averageRating: BigNumber;
    successfulTransactions: BigNumber;
    disputesWon: BigNumber;
    disputesLost: BigNumber;
    tier: number;
    lastActivityTimestamp: BigNumber;
    isSuspended: boolean;
    suspensionEndTime: BigNumber;
  };
}

export interface EnhancedEscrowInterface extends utils.Interface {
  functions: {
    "MAX_PLATFORM_FEE()": FunctionFragment;
    "MIN_VOTING_POWER()": FunctionFragment;
    "REPUTATION_DECAY_PERIOD()": FunctionFragment;
    "VOTING_PERIOD()": FunctionFragment;
    "arbitratorFees(address)": FunctionFragment;
    "authorizeArbitrator(address,bool)": FunctionFragment;
    "authorizedArbitrators(address)": FunctionFragment;
    "calculateWeightedScore(address)": FunctionFragment;
    "castHelpfulVote(uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "confirmDelivery(uint256,string)": FunctionFragment;
    "createEscrow(uint256,address,address,uint256,uint256,uint8)": FunctionFragment;
    "detailedReputationScores(address)": FunctionFragment;
    "escrows(uint256)": FunctionFragment;
    "executeEmergencyRefund(uint256)": FunctionFragment;
    "getDetailedReputation(address)": FunctionFragment;
    "getReputationTier(address)": FunctionFragment;
    "getTopSellers(uint256)": FunctionFragment;
    "getUserReviews(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "ldaoToken()": FunctionFragment;
    "lockFunds(uint256)": FunctionFragment;
    "nextEscrowId()": FunctionFragment;
    "nextReviewId()": FunctionFragment;
    "openDispute(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "platformFeePercentage()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveDisputeByArbitrator(uint256,bool)": FunctionFragment;
    "reviews(uint256)": FunctionFragment;
    "setArbitratorFee(address,uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setLDAOToken(address)": FunctionFragment;
    "setPlatformFee(uint256)": FunctionFragment;
    "submitMarketplaceReview(uint256,address,uint8,string)": FunctionFragment;
    "suspendUser(address,uint256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userEscrows(address,uint256)": FunctionFragment;
    "userReviews(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PLATFORM_FEE"
      | "MIN_VOTING_POWER"
      | "REPUTATION_DECAY_PERIOD"
      | "VOTING_PERIOD"
      | "arbitratorFees"
      | "authorizeArbitrator"
      | "authorizedArbitrators"
      | "calculateWeightedScore"
      | "castHelpfulVote"
      | "castVote"
      | "confirmDelivery"
      | "createEscrow"
      | "detailedReputationScores"
      | "escrows"
      | "executeEmergencyRefund"
      | "getDetailedReputation"
      | "getReputationTier"
      | "getTopSellers"
      | "getUserReviews"
      | "governance"
      | "ldaoToken"
      | "lockFunds"
      | "nextEscrowId"
      | "nextReviewId"
      | "openDispute"
      | "owner"
      | "platformFeePercentage"
      | "renounceOwnership"
      | "resolveDisputeByArbitrator"
      | "reviews"
      | "setArbitratorFee"
      | "setGovernance"
      | "setLDAOToken"
      | "setPlatformFee"
      | "submitMarketplaceReview"
      | "suspendUser"
      | "transferOwnership"
      | "userEscrows"
      | "userReviews"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_POWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_DECAY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitratorFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeArbitrator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedArbitrators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWeightedScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "castHelpfulVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDelivery",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "detailedReputationScores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyRefund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedReputation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationTier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopSellers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReviews",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ldaoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEscrowId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextReviewId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openDispute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDisputeByArbitrator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviews",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitratorFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLDAOToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMarketplaceReview",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userEscrows",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userReviews",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_POWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_DECAY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitratorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedArbitrators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWeightedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castHelpfulVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detailedReputationScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopSellers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ldaoToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextEscrowId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextReviewId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDisputeByArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setArbitratorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLDAOToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMarketplaceReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEscrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReviews",
    data: BytesLike
  ): Result;

  events: {
    "ArbitratorAppointed(uint256,address)": EventFragment;
    "DeliveryConfirmed(uint256,string)": EventFragment;
    "DisputeOpened(uint256,uint8)": EventFragment;
    "EmergencyRefund(uint256,address,uint256)": EventFragment;
    "EscrowCreated(uint256,address,address,uint256)": EventFragment;
    "EscrowResolved(uint256,uint8,address)": EventFragment;
    "FundsLocked(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReputationUpdated(address,uint256,uint8)": EventFragment;
    "ReviewSubmitted(uint256,address,address,uint8)": EventFragment;
    "UserSuspended(address,uint256,string)": EventFragment;
    "VoteCast(uint256,address,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitratorAppointed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeliveryConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserSuspended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface ArbitratorAppointedEventObject {
  escrowId: BigNumber;
  arbitrator: string;
}
export type ArbitratorAppointedEvent = TypedEvent<
  [BigNumber, string],
  ArbitratorAppointedEventObject
>;

export type ArbitratorAppointedEventFilter =
  TypedEventFilter<ArbitratorAppointedEvent>;

export interface DeliveryConfirmedEventObject {
  escrowId: BigNumber;
  deliveryInfo: string;
}
export type DeliveryConfirmedEvent = TypedEvent<
  [BigNumber, string],
  DeliveryConfirmedEventObject
>;

export type DeliveryConfirmedEventFilter =
  TypedEventFilter<DeliveryConfirmedEvent>;

export interface DisputeOpenedEventObject {
  escrowId: BigNumber;
  method: number;
}
export type DisputeOpenedEvent = TypedEvent<
  [BigNumber, number],
  DisputeOpenedEventObject
>;

export type DisputeOpenedEventFilter = TypedEventFilter<DisputeOpenedEvent>;

export interface EmergencyRefundEventObject {
  escrowId: BigNumber;
  buyer: string;
  amount: BigNumber;
}
export type EmergencyRefundEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  EmergencyRefundEventObject
>;

export type EmergencyRefundEventFilter = TypedEventFilter<EmergencyRefundEvent>;

export interface EscrowCreatedEventObject {
  escrowId: BigNumber;
  buyer: string;
  seller: string;
  amount: BigNumber;
}
export type EscrowCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  EscrowCreatedEventObject
>;

export type EscrowCreatedEventFilter = TypedEventFilter<EscrowCreatedEvent>;

export interface EscrowResolvedEventObject {
  escrowId: BigNumber;
  resolution: number;
  winner: string;
}
export type EscrowResolvedEvent = TypedEvent<
  [BigNumber, number, string],
  EscrowResolvedEventObject
>;

export type EscrowResolvedEventFilter = TypedEventFilter<EscrowResolvedEvent>;

export interface FundsLockedEventObject {
  escrowId: BigNumber;
  amount: BigNumber;
}
export type FundsLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FundsLockedEventObject
>;

export type FundsLockedEventFilter = TypedEventFilter<FundsLockedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReputationUpdatedEventObject {
  user: string;
  newScore: BigNumber;
  newTier: number;
}
export type ReputationUpdatedEvent = TypedEvent<
  [string, BigNumber, number],
  ReputationUpdatedEventObject
>;

export type ReputationUpdatedEventFilter =
  TypedEventFilter<ReputationUpdatedEvent>;

export interface ReviewSubmittedEventObject {
  reviewId: BigNumber;
  reviewer: string;
  reviewee: string;
  rating: number;
}
export type ReviewSubmittedEvent = TypedEvent<
  [BigNumber, string, string, number],
  ReviewSubmittedEventObject
>;

export type ReviewSubmittedEventFilter = TypedEventFilter<ReviewSubmittedEvent>;

export interface UserSuspendedEventObject {
  user: string;
  duration: BigNumber;
  reason: string;
}
export type UserSuspendedEvent = TypedEvent<
  [string, BigNumber, string],
  UserSuspendedEventObject
>;

export type UserSuspendedEventFilter = TypedEventFilter<UserSuspendedEvent>;

export interface VoteCastEventObject {
  escrowId: BigNumber;
  voter: string;
  forBuyer: boolean;
  votingPower: BigNumber;
}
export type VoteCastEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface EnhancedEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EnhancedEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_VOTING_POWER(overrides?: CallOverrides): Promise<[BigNumber]>;

    REPUTATION_DECAY_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    arbitratorFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    authorizeArbitrator(
      arbitrator: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedArbitrators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVote(
      escrowId: PromiseOrValue<BigNumberish>,
      forBuyer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmDelivery(
      escrowId: PromiseOrValue<BigNumberish>,
      deliveryInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEscrow(
      listingId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deliveryDeadline: PromiseOrValue<BigNumberish>,
      resolutionMethod: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    detailedReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        totalPoints: BigNumber;
        reviewCount: BigNumber;
        averageRating: BigNumber;
        successfulTransactions: BigNumber;
        disputesWon: BigNumber;
        disputesLost: BigNumber;
        tier: number;
        lastActivityTimestamp: BigNumber;
        isSuspended: boolean;
        suspensionEndTime: BigNumber;
      }
    >;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        listingId: BigNumber;
        buyer: string;
        seller: string;
        tokenAddress: string;
        amount: BigNumber;
        feeAmount: BigNumber;
        deliveryInfo: string;
        deliveryDeadline: BigNumber;
        createdAt: BigNumber;
        resolvedAt: BigNumber;
        status: number;
        resolutionMethod: number;
        votesForBuyer: BigNumber;
        votesForSeller: BigNumber;
        totalVotingPower: BigNumber;
        appointedArbitrator: string;
        evidenceSubmitted: string;
        requiresMultiSig: boolean;
        multiSigThreshold: BigNumber;
        signatureCount: BigNumber;
        timeLockExpiry: BigNumber;
        emergencyRefundEnabled: boolean;
      }
    >;

    executeEmergencyRefund(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDetailedReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[EnhancedEscrow.DetailedReputationScoreStructOutput]>;

    getReputationTier(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { sellers: string[]; scores: BigNumber[] }
    >;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    ldaoToken(overrides?: CallOverrides): Promise<[string]>;

    lockFunds(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextEscrowId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextReviewId(overrides?: CallOverrides): Promise<[BigNumber]>;

    openDispute(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platformFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveDisputeByArbitrator(
      escrowId: PromiseOrValue<BigNumberish>,
      buyerWins: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: BigNumber;
        reviewer: string;
        reviewee: string;
        escrowId: BigNumber;
        rating: number;
        reviewText: string;
        timestamp: BigNumber;
        isVerified: boolean;
        helpfulVotes: BigNumber;
      }
    >;

    setArbitratorFee(
      arbitrator: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLDAOToken(
      newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitMarketplaceReview(
      escrowId: PromiseOrValue<BigNumberish>,
      reviewee: PromiseOrValue<string>,
      rating: PromiseOrValue<BigNumberish>,
      reviewText: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userEscrows(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_VOTING_POWER(overrides?: CallOverrides): Promise<BigNumber>;

  REPUTATION_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  arbitratorFees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  authorizeArbitrator(
    arbitrator: PromiseOrValue<string>,
    authorized: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedArbitrators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  calculateWeightedScore(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  castHelpfulVote(
    reviewId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVote(
    escrowId: PromiseOrValue<BigNumberish>,
    forBuyer: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmDelivery(
    escrowId: PromiseOrValue<BigNumberish>,
    deliveryInfo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEscrow(
    listingId: PromiseOrValue<BigNumberish>,
    seller: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deliveryDeadline: PromiseOrValue<BigNumberish>,
    resolutionMethod: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  detailedReputationScores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      totalPoints: BigNumber;
      reviewCount: BigNumber;
      averageRating: BigNumber;
      successfulTransactions: BigNumber;
      disputesWon: BigNumber;
      disputesLost: BigNumber;
      tier: number;
      lastActivityTimestamp: BigNumber;
      isSuspended: boolean;
      suspensionEndTime: BigNumber;
    }
  >;

  escrows(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      listingId: BigNumber;
      buyer: string;
      seller: string;
      tokenAddress: string;
      amount: BigNumber;
      feeAmount: BigNumber;
      deliveryInfo: string;
      deliveryDeadline: BigNumber;
      createdAt: BigNumber;
      resolvedAt: BigNumber;
      status: number;
      resolutionMethod: number;
      votesForBuyer: BigNumber;
      votesForSeller: BigNumber;
      totalVotingPower: BigNumber;
      appointedArbitrator: string;
      evidenceSubmitted: string;
      requiresMultiSig: boolean;
      multiSigThreshold: BigNumber;
      signatureCount: BigNumber;
      timeLockExpiry: BigNumber;
      emergencyRefundEnabled: boolean;
    }
  >;

  executeEmergencyRefund(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDetailedReputation(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<EnhancedEscrow.DetailedReputationScoreStructOutput>;

  getReputationTier(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTopSellers(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { sellers: string[]; scores: BigNumber[] }
  >;

  getUserReviews(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  ldaoToken(overrides?: CallOverrides): Promise<string>;

  lockFunds(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextEscrowId(overrides?: CallOverrides): Promise<BigNumber>;

  nextReviewId(overrides?: CallOverrides): Promise<BigNumber>;

  openDispute(
    escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveDisputeByArbitrator(
    escrowId: PromiseOrValue<BigNumberish>,
    buyerWins: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviews(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      number,
      string,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      id: BigNumber;
      reviewer: string;
      reviewee: string;
      escrowId: BigNumber;
      rating: number;
      reviewText: string;
      timestamp: BigNumber;
      isVerified: boolean;
      helpfulVotes: BigNumber;
    }
  >;

  setArbitratorFee(
    arbitrator: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    newGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLDAOToken(
    newToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitMarketplaceReview(
    escrowId: PromiseOrValue<BigNumberish>,
    reviewee: PromiseOrValue<string>,
    rating: PromiseOrValue<BigNumberish>,
    reviewText: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendUser(
    user: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userEscrows(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userReviews(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_POWER(overrides?: CallOverrides): Promise<BigNumber>;

    REPUTATION_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizeArbitrator(
      arbitrator: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedArbitrators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      escrowId: PromiseOrValue<BigNumberish>,
      forBuyer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmDelivery(
      escrowId: PromiseOrValue<BigNumberish>,
      deliveryInfo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEscrow(
      listingId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deliveryDeadline: PromiseOrValue<BigNumberish>,
      resolutionMethod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    detailedReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        totalPoints: BigNumber;
        reviewCount: BigNumber;
        averageRating: BigNumber;
        successfulTransactions: BigNumber;
        disputesWon: BigNumber;
        disputesLost: BigNumber;
        tier: number;
        lastActivityTimestamp: BigNumber;
        isSuspended: boolean;
        suspensionEndTime: BigNumber;
      }
    >;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        listingId: BigNumber;
        buyer: string;
        seller: string;
        tokenAddress: string;
        amount: BigNumber;
        feeAmount: BigNumber;
        deliveryInfo: string;
        deliveryDeadline: BigNumber;
        createdAt: BigNumber;
        resolvedAt: BigNumber;
        status: number;
        resolutionMethod: number;
        votesForBuyer: BigNumber;
        votesForSeller: BigNumber;
        totalVotingPower: BigNumber;
        appointedArbitrator: string;
        evidenceSubmitted: string;
        requiresMultiSig: boolean;
        multiSigThreshold: BigNumber;
        signatureCount: BigNumber;
        timeLockExpiry: BigNumber;
        emergencyRefundEnabled: boolean;
      }
    >;

    executeEmergencyRefund(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDetailedReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<EnhancedEscrow.DetailedReputationScoreStructOutput>;

    getReputationTier(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { sellers: string[]; scores: BigNumber[] }
    >;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    ldaoToken(overrides?: CallOverrides): Promise<string>;

    lockFunds(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nextEscrowId(overrides?: CallOverrides): Promise<BigNumber>;

    nextReviewId(overrides?: CallOverrides): Promise<BigNumber>;

    openDispute(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveDisputeByArbitrator(
      escrowId: PromiseOrValue<BigNumberish>,
      buyerWins: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: BigNumber;
        reviewer: string;
        reviewee: string;
        escrowId: BigNumber;
        rating: number;
        reviewText: string;
        timestamp: BigNumber;
        isVerified: boolean;
        helpfulVotes: BigNumber;
      }
    >;

    setArbitratorFee(
      arbitrator: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLDAOToken(
      newToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitMarketplaceReview(
      escrowId: PromiseOrValue<BigNumberish>,
      reviewee: PromiseOrValue<string>,
      rating: PromiseOrValue<BigNumberish>,
      reviewText: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userEscrows(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ArbitratorAppointed(uint256,address)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      arbitrator?: PromiseOrValue<string> | null
    ): ArbitratorAppointedEventFilter;
    ArbitratorAppointed(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      arbitrator?: PromiseOrValue<string> | null
    ): ArbitratorAppointedEventFilter;

    "DeliveryConfirmed(uint256,string)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      deliveryInfo?: null
    ): DeliveryConfirmedEventFilter;
    DeliveryConfirmed(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      deliveryInfo?: null
    ): DeliveryConfirmedEventFilter;

    "DisputeOpened(uint256,uint8)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      method?: null
    ): DisputeOpenedEventFilter;
    DisputeOpened(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      method?: null
    ): DisputeOpenedEventFilter;

    "EmergencyRefund(uint256,address,uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyRefundEventFilter;
    EmergencyRefund(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyRefundEventFilter;

    "EscrowCreated(uint256,address,address,uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      amount?: null
    ): EscrowCreatedEventFilter;
    EscrowCreated(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      amount?: null
    ): EscrowCreatedEventFilter;

    "EscrowResolved(uint256,uint8,address)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      resolution?: null,
      winner?: null
    ): EscrowResolvedEventFilter;
    EscrowResolved(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      resolution?: null,
      winner?: null
    ): EscrowResolvedEventFilter;

    "FundsLocked(uint256,uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): FundsLockedEventFilter;
    FundsLocked(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): FundsLockedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReputationUpdated(address,uint256,uint8)"(
      user?: PromiseOrValue<string> | null,
      newScore?: null,
      newTier?: null
    ): ReputationUpdatedEventFilter;
    ReputationUpdated(
      user?: PromiseOrValue<string> | null,
      newScore?: null,
      newTier?: null
    ): ReputationUpdatedEventFilter;

    "ReviewSubmitted(uint256,address,address,uint8)"(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      reviewer?: PromiseOrValue<string> | null,
      reviewee?: PromiseOrValue<string> | null,
      rating?: null
    ): ReviewSubmittedEventFilter;
    ReviewSubmitted(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      reviewer?: PromiseOrValue<string> | null,
      reviewee?: PromiseOrValue<string> | null,
      rating?: null
    ): ReviewSubmittedEventFilter;

    "UserSuspended(address,uint256,string)"(
      user?: PromiseOrValue<string> | null,
      duration?: null,
      reason?: null
    ): UserSuspendedEventFilter;
    UserSuspended(
      user?: PromiseOrValue<string> | null,
      duration?: null,
      reason?: null
    ): UserSuspendedEventFilter;

    "VoteCast(uint256,address,bool,uint256)"(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      forBuyer?: null,
      votingPower?: null
    ): VoteCastEventFilter;
    VoteCast(
      escrowId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      forBuyer?: null,
      votingPower?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_POWER(overrides?: CallOverrides): Promise<BigNumber>;

    REPUTATION_DECAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    arbitratorFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizeArbitrator(
      arbitrator: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedArbitrators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVote(
      escrowId: PromiseOrValue<BigNumberish>,
      forBuyer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmDelivery(
      escrowId: PromiseOrValue<BigNumberish>,
      deliveryInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEscrow(
      listingId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deliveryDeadline: PromiseOrValue<BigNumberish>,
      resolutionMethod: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    detailedReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeEmergencyRefund(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDetailedReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReputationTier(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    ldaoToken(overrides?: CallOverrides): Promise<BigNumber>;

    lockFunds(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextEscrowId(overrides?: CallOverrides): Promise<BigNumber>;

    nextReviewId(overrides?: CallOverrides): Promise<BigNumber>;

    openDispute(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveDisputeByArbitrator(
      escrowId: PromiseOrValue<BigNumberish>,
      buyerWins: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setArbitratorFee(
      arbitrator: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLDAOToken(
      newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitMarketplaceReview(
      escrowId: PromiseOrValue<BigNumberish>,
      reviewee: PromiseOrValue<string>,
      rating: PromiseOrValue<BigNumberish>,
      reviewText: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userEscrows(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_VOTING_POWER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REPUTATION_DECAY_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VOTING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitratorFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizeArbitrator(
      arbitrator: PromiseOrValue<string>,
      authorized: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedArbitrators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      escrowId: PromiseOrValue<BigNumberish>,
      forBuyer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmDelivery(
      escrowId: PromiseOrValue<BigNumberish>,
      deliveryInfo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEscrow(
      listingId: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deliveryDeadline: PromiseOrValue<BigNumberish>,
      resolutionMethod: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    detailedReputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeEmergencyRefund(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDetailedReputation(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReputationTier(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ldaoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockFunds(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextEscrowId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextReviewId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openDispute(
      escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveDisputeByArbitrator(
      escrowId: PromiseOrValue<BigNumberish>,
      buyerWins: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setArbitratorFee(
      arbitrator: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLDAOToken(
      newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitMarketplaceReview(
      escrowId: PromiseOrValue<BigNumberish>,
      reviewee: PromiseOrValue<string>,
      rating: PromiseOrValue<BigNumberish>,
      reviewText: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userEscrows(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
