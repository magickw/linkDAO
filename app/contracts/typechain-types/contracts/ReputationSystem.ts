/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ReputationSystem {
  export type ReputationScoreStruct = {
    totalPoints: PromiseOrValue<BigNumberish>;
    reviewCount: PromiseOrValue<BigNumberish>;
    averageRating: PromiseOrValue<BigNumberish>;
    weightedScore: PromiseOrValue<BigNumberish>;
    lastUpdated: PromiseOrValue<BigNumberish>;
    tier: PromiseOrValue<BigNumberish>;
    suspiciousActivityCount: PromiseOrValue<BigNumberish>;
    lastReviewTimestamp: PromiseOrValue<BigNumberish>;
    isSuspended: PromiseOrValue<boolean>;
    suspensionEndTime: PromiseOrValue<BigNumberish>;
  };

  export type ReputationScoreStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    totalPoints: BigNumber;
    reviewCount: BigNumber;
    averageRating: BigNumber;
    weightedScore: BigNumber;
    lastUpdated: BigNumber;
    tier: number;
    suspiciousActivityCount: BigNumber;
    lastReviewTimestamp: BigNumber;
    isSuspended: boolean;
    suspensionEndTime: BigNumber;
  };

  export type ReviewStruct = {
    id: PromiseOrValue<BigNumberish>;
    reviewer: PromiseOrValue<string>;
    reviewee: PromiseOrValue<string>;
    orderId: PromiseOrValue<BigNumberish>;
    rating: PromiseOrValue<BigNumberish>;
    ipfsHash: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    helpfulVotes: PromiseOrValue<BigNumberish>;
    unhelpfulVotes: PromiseOrValue<BigNumberish>;
    isVerifiedPurchase: PromiseOrValue<boolean>;
    reviewerReputationAtTime: PromiseOrValue<BigNumberish>;
  };

  export type ReviewStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    id: BigNumber;
    reviewer: string;
    reviewee: string;
    orderId: BigNumber;
    rating: number;
    ipfsHash: string;
    timestamp: BigNumber;
    status: number;
    helpfulVotes: BigNumber;
    unhelpfulVotes: BigNumber;
    isVerifiedPurchase: boolean;
    reviewerReputationAtTime: BigNumber;
  };

  export type SellerRankingStruct = {
    seller: PromiseOrValue<string>;
    score: PromiseOrValue<BigNumberish>;
    salesCount: PromiseOrValue<BigNumberish>;
    averageRating: PromiseOrValue<BigNumberish>;
    tier: PromiseOrValue<BigNumberish>;
  };

  export type SellerRankingStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    seller: string;
    score: BigNumber;
    salesCount: BigNumber;
    averageRating: BigNumber;
    tier: number;
  };
}

export interface ReputationSystemInterface extends utils.Interface {
  functions: {
    "addModerator(address)": FunctionFragment;
    "calculateWeightedScore(address)": FunctionFragment;
    "castHelpfulVote(uint256,bool)": FunctionFragment;
    "getReputationScore(address)": FunctionFragment;
    "getReview(uint256)": FunctionFragment;
    "getTopSellers(uint256)": FunctionFragment;
    "getUserReviews(address)": FunctionFragment;
    "hasReviewed(address,address)": FunctionFragment;
    "helpfulVoteWeight()": FunctionFragment;
    "maxReviewsPerDay()": FunctionFragment;
    "minReviewInterval()": FunctionFragment;
    "moderatorMinReputation()": FunctionFragment;
    "moderatorReputationThreshold(address)": FunctionFragment;
    "nextReviewId()": FunctionFragment;
    "owner()": FunctionFragment;
    "recordSuccessfulTransaction(address,uint256)": FunctionFragment;
    "removeModerator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reputationScores(address)": FunctionFragment;
    "responseTime(address)": FunctionFragment;
    "reviewHasVoted(uint256,address)": FunctionFragment;
    "reviewVerificationReward()": FunctionFragment;
    "reviews(uint256)": FunctionFragment;
    "setMaxReviewsPerDay(uint256)": FunctionFragment;
    "setMinReviewInterval(uint256)": FunctionFragment;
    "setModeratorMinReputation(uint256)": FunctionFragment;
    "setSuspiciousActivityThreshold(uint256)": FunctionFragment;
    "submitReview(address,uint256,uint8,string,bool)": FunctionFragment;
    "successfulTransactions(address)": FunctionFragment;
    "suspendUser(address,uint256,string)": FunctionFragment;
    "suspiciousActivityThreshold()": FunctionFragment;
    "totalRevenue(address)": FunctionFragment;
    "totalReviews()": FunctionFragment;
    "totalSales(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userReviews(address,uint256)": FunctionFragment;
    "verifiedModerators(address)": FunctionFragment;
    "verifyReview(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addModerator"
      | "calculateWeightedScore"
      | "castHelpfulVote"
      | "getReputationScore"
      | "getReview"
      | "getTopSellers"
      | "getUserReviews"
      | "hasReviewed"
      | "helpfulVoteWeight"
      | "maxReviewsPerDay"
      | "minReviewInterval"
      | "moderatorMinReputation"
      | "moderatorReputationThreshold"
      | "nextReviewId"
      | "owner"
      | "recordSuccessfulTransaction"
      | "removeModerator"
      | "renounceOwnership"
      | "reputationScores"
      | "responseTime"
      | "reviewHasVoted"
      | "reviewVerificationReward"
      | "reviews"
      | "setMaxReviewsPerDay"
      | "setMinReviewInterval"
      | "setModeratorMinReputation"
      | "setSuspiciousActivityThreshold"
      | "submitReview"
      | "successfulTransactions"
      | "suspendUser"
      | "suspiciousActivityThreshold"
      | "totalRevenue"
      | "totalReviews"
      | "totalSales"
      | "transferOwnership"
      | "userReviews"
      | "verifiedModerators"
      | "verifyReview"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addModerator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWeightedScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "castHelpfulVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReview",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopSellers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReviews",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReviewed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "helpfulVoteWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReviewsPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minReviewInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moderatorMinReputation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moderatorReputationThreshold",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextReviewId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordSuccessfulTransaction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModerator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationScores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "responseTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewHasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewVerificationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviews",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReviewsPerDay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReviewInterval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setModeratorMinReputation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuspiciousActivityThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReview",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulTransactions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "suspiciousActivityThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRevenue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReviews",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSales",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userReviews",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedModerators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReview",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWeightedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castHelpfulVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReview", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTopSellers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReviewed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "helpfulVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReviewsPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minReviewInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moderatorMinReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moderatorReputationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextReviewId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordSuccessfulTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewHasVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewVerificationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReviewsPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReviewInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModeratorMinReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSuspiciousActivityThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspiciousActivityThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedModerators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReview",
    data: BytesLike
  ): Result;

  events: {
    "HelpfulVoteCast(uint256,address,bool)": EventFragment;
    "ModeratorAdded(address)": EventFragment;
    "ModeratorRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReputationUpdated(address,uint256,uint8)": EventFragment;
    "ReviewSubmitted(uint256,address,address,uint8)": EventFragment;
    "ReviewVerified(uint256,address)": EventFragment;
    "SuspiciousActivityDetected(address,string)": EventFragment;
    "UserSuspended(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HelpfulVoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModeratorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModeratorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReviewVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuspiciousActivityDetected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserSuspended"): EventFragment;
}

export interface HelpfulVoteCastEventObject {
  reviewId: BigNumber;
  voter: string;
  isHelpful: boolean;
}
export type HelpfulVoteCastEvent = TypedEvent<
  [BigNumber, string, boolean],
  HelpfulVoteCastEventObject
>;

export type HelpfulVoteCastEventFilter = TypedEventFilter<HelpfulVoteCastEvent>;

export interface ModeratorAddedEventObject {
  moderator: string;
}
export type ModeratorAddedEvent = TypedEvent<
  [string],
  ModeratorAddedEventObject
>;

export type ModeratorAddedEventFilter = TypedEventFilter<ModeratorAddedEvent>;

export interface ModeratorRemovedEventObject {
  moderator: string;
}
export type ModeratorRemovedEvent = TypedEvent<
  [string],
  ModeratorRemovedEventObject
>;

export type ModeratorRemovedEventFilter =
  TypedEventFilter<ModeratorRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReputationUpdatedEventObject {
  user: string;
  newScore: BigNumber;
  newTier: number;
}
export type ReputationUpdatedEvent = TypedEvent<
  [string, BigNumber, number],
  ReputationUpdatedEventObject
>;

export type ReputationUpdatedEventFilter =
  TypedEventFilter<ReputationUpdatedEvent>;

export interface ReviewSubmittedEventObject {
  reviewId: BigNumber;
  reviewer: string;
  reviewee: string;
  rating: number;
}
export type ReviewSubmittedEvent = TypedEvent<
  [BigNumber, string, string, number],
  ReviewSubmittedEventObject
>;

export type ReviewSubmittedEventFilter = TypedEventFilter<ReviewSubmittedEvent>;

export interface ReviewVerifiedEventObject {
  reviewId: BigNumber;
  moderator: string;
}
export type ReviewVerifiedEvent = TypedEvent<
  [BigNumber, string],
  ReviewVerifiedEventObject
>;

export type ReviewVerifiedEventFilter = TypedEventFilter<ReviewVerifiedEvent>;

export interface SuspiciousActivityDetectedEventObject {
  user: string;
  reason: string;
}
export type SuspiciousActivityDetectedEvent = TypedEvent<
  [string, string],
  SuspiciousActivityDetectedEventObject
>;

export type SuspiciousActivityDetectedEventFilter =
  TypedEventFilter<SuspiciousActivityDetectedEvent>;

export interface UserSuspendedEventObject {
  user: string;
  duration: BigNumber;
  reason: string;
}
export type UserSuspendedEvent = TypedEvent<
  [string, BigNumber, string],
  UserSuspendedEventObject
>;

export type UserSuspendedEventFilter = TypedEventFilter<UserSuspendedEvent>;

export interface ReputationSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReputationSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addModerator(
      moderator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      isHelpful: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReputationSystem.ReputationScoreStructOutput]>;

    getReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ReputationSystem.ReviewStructOutput]>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ReputationSystem.SellerRankingStructOutput[]]>;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    hasReviewed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    helpfulVoteWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxReviewsPerDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReviewInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    moderatorMinReputation(overrides?: CallOverrides): Promise<[BigNumber]>;

    moderatorReputationThreshold(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextReviewId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recordSuccessfulTransaction(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeModerator(
      moderator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        totalPoints: BigNumber;
        reviewCount: BigNumber;
        averageRating: BigNumber;
        weightedScore: BigNumber;
        lastUpdated: BigNumber;
        tier: number;
        suspiciousActivityCount: BigNumber;
        lastReviewTimestamp: BigNumber;
        isSuspended: boolean;
        suspensionEndTime: BigNumber;
      }
    >;

    responseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reviewHasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reviewVerificationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: BigNumber;
        reviewer: string;
        reviewee: string;
        orderId: BigNumber;
        rating: number;
        ipfsHash: string;
        timestamp: BigNumber;
        status: number;
        helpfulVotes: BigNumber;
        unhelpfulVotes: BigNumber;
        isVerifiedPurchase: boolean;
        reviewerReputationAtTime: BigNumber;
      }
    >;

    setMaxReviewsPerDay(
      newMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinReviewInterval(
      newInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setModeratorMinReputation(
      newMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSuspiciousActivityThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitReview(
      reviewee: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      ipfsHash: PromiseOrValue<string>,
      isVerifiedPurchase: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    successfulTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspiciousActivityThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalReviews(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifiedModerators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addModerator(
    moderator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateWeightedScore(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  castHelpfulVote(
    reviewId: PromiseOrValue<BigNumberish>,
    isHelpful: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getReputationScore(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReputationSystem.ReputationScoreStructOutput>;

  getReview(
    reviewId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ReputationSystem.ReviewStructOutput>;

  getTopSellers(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ReputationSystem.SellerRankingStructOutput[]>;

  getUserReviews(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  hasReviewed(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  helpfulVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

  maxReviewsPerDay(overrides?: CallOverrides): Promise<BigNumber>;

  minReviewInterval(overrides?: CallOverrides): Promise<BigNumber>;

  moderatorMinReputation(overrides?: CallOverrides): Promise<BigNumber>;

  moderatorReputationThreshold(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextReviewId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recordSuccessfulTransaction(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeModerator(
    moderator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reputationScores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      totalPoints: BigNumber;
      reviewCount: BigNumber;
      averageRating: BigNumber;
      weightedScore: BigNumber;
      lastUpdated: BigNumber;
      tier: number;
      suspiciousActivityCount: BigNumber;
      lastReviewTimestamp: BigNumber;
      isSuspended: boolean;
      suspensionEndTime: BigNumber;
    }
  >;

  responseTime(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reviewHasVoted(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reviewVerificationReward(overrides?: CallOverrides): Promise<BigNumber>;

  reviews(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      number,
      string,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      id: BigNumber;
      reviewer: string;
      reviewee: string;
      orderId: BigNumber;
      rating: number;
      ipfsHash: string;
      timestamp: BigNumber;
      status: number;
      helpfulVotes: BigNumber;
      unhelpfulVotes: BigNumber;
      isVerifiedPurchase: boolean;
      reviewerReputationAtTime: BigNumber;
    }
  >;

  setMaxReviewsPerDay(
    newMax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinReviewInterval(
    newInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setModeratorMinReputation(
    newMin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSuspiciousActivityThreshold(
    newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitReview(
    reviewee: PromiseOrValue<string>,
    orderId: PromiseOrValue<BigNumberish>,
    rating: PromiseOrValue<BigNumberish>,
    ipfsHash: PromiseOrValue<string>,
    isVerifiedPurchase: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  successfulTransactions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  suspendUser(
    user: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspiciousActivityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  totalRevenue(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalReviews(overrides?: CallOverrides): Promise<BigNumber>;

  totalSales(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userReviews(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifiedModerators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyReview(
    reviewId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addModerator(
      moderator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      isHelpful: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReputationSystem.ReputationScoreStructOutput>;

    getReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReputationSystem.ReviewStructOutput>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReputationSystem.SellerRankingStructOutput[]>;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hasReviewed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    helpfulVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    maxReviewsPerDay(overrides?: CallOverrides): Promise<BigNumber>;

    minReviewInterval(overrides?: CallOverrides): Promise<BigNumber>;

    moderatorMinReputation(overrides?: CallOverrides): Promise<BigNumber>;

    moderatorReputationThreshold(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextReviewId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recordSuccessfulTransaction(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModerator(
      moderator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        totalPoints: BigNumber;
        reviewCount: BigNumber;
        averageRating: BigNumber;
        weightedScore: BigNumber;
        lastUpdated: BigNumber;
        tier: number;
        suspiciousActivityCount: BigNumber;
        lastReviewTimestamp: BigNumber;
        isSuspended: boolean;
        suspensionEndTime: BigNumber;
      }
    >;

    responseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviewHasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reviewVerificationReward(overrides?: CallOverrides): Promise<BigNumber>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        id: BigNumber;
        reviewer: string;
        reviewee: string;
        orderId: BigNumber;
        rating: number;
        ipfsHash: string;
        timestamp: BigNumber;
        status: number;
        helpfulVotes: BigNumber;
        unhelpfulVotes: BigNumber;
        isVerifiedPurchase: boolean;
        reviewerReputationAtTime: BigNumber;
      }
    >;

    setMaxReviewsPerDay(
      newMax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReviewInterval(
      newInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setModeratorMinReputation(
      newMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSuspiciousActivityThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitReview(
      reviewee: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      ipfsHash: PromiseOrValue<string>,
      isVerifiedPurchase: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    successfulTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    suspiciousActivityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    totalRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReviews(overrides?: CallOverrides): Promise<BigNumber>;

    totalSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifiedModerators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HelpfulVoteCast(uint256,address,bool)"(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      isHelpful?: null
    ): HelpfulVoteCastEventFilter;
    HelpfulVoteCast(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      isHelpful?: null
    ): HelpfulVoteCastEventFilter;

    "ModeratorAdded(address)"(
      moderator?: PromiseOrValue<string> | null
    ): ModeratorAddedEventFilter;
    ModeratorAdded(
      moderator?: PromiseOrValue<string> | null
    ): ModeratorAddedEventFilter;

    "ModeratorRemoved(address)"(
      moderator?: PromiseOrValue<string> | null
    ): ModeratorRemovedEventFilter;
    ModeratorRemoved(
      moderator?: PromiseOrValue<string> | null
    ): ModeratorRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReputationUpdated(address,uint256,uint8)"(
      user?: PromiseOrValue<string> | null,
      newScore?: null,
      newTier?: null
    ): ReputationUpdatedEventFilter;
    ReputationUpdated(
      user?: PromiseOrValue<string> | null,
      newScore?: null,
      newTier?: null
    ): ReputationUpdatedEventFilter;

    "ReviewSubmitted(uint256,address,address,uint8)"(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      reviewer?: PromiseOrValue<string> | null,
      reviewee?: PromiseOrValue<string> | null,
      rating?: null
    ): ReviewSubmittedEventFilter;
    ReviewSubmitted(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      reviewer?: PromiseOrValue<string> | null,
      reviewee?: PromiseOrValue<string> | null,
      rating?: null
    ): ReviewSubmittedEventFilter;

    "ReviewVerified(uint256,address)"(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      moderator?: PromiseOrValue<string> | null
    ): ReviewVerifiedEventFilter;
    ReviewVerified(
      reviewId?: PromiseOrValue<BigNumberish> | null,
      moderator?: PromiseOrValue<string> | null
    ): ReviewVerifiedEventFilter;

    "SuspiciousActivityDetected(address,string)"(
      user?: PromiseOrValue<string> | null,
      reason?: null
    ): SuspiciousActivityDetectedEventFilter;
    SuspiciousActivityDetected(
      user?: PromiseOrValue<string> | null,
      reason?: null
    ): SuspiciousActivityDetectedEventFilter;

    "UserSuspended(address,uint256,string)"(
      user?: PromiseOrValue<string> | null,
      duration?: null,
      reason?: null
    ): UserSuspendedEventFilter;
    UserSuspended(
      user?: PromiseOrValue<string> | null,
      duration?: null,
      reason?: null
    ): UserSuspendedEventFilter;
  };

  estimateGas: {
    addModerator(
      moderator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      isHelpful: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasReviewed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    helpfulVoteWeight(overrides?: CallOverrides): Promise<BigNumber>;

    maxReviewsPerDay(overrides?: CallOverrides): Promise<BigNumber>;

    minReviewInterval(overrides?: CallOverrides): Promise<BigNumber>;

    moderatorMinReputation(overrides?: CallOverrides): Promise<BigNumber>;

    moderatorReputationThreshold(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextReviewId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recordSuccessfulTransaction(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeModerator(
      moderator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    responseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviewHasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviewVerificationReward(overrides?: CallOverrides): Promise<BigNumber>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMaxReviewsPerDay(
      newMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinReviewInterval(
      newInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setModeratorMinReputation(
      newMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSuspiciousActivityThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitReview(
      reviewee: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      ipfsHash: PromiseOrValue<string>,
      isVerifiedPurchase: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    successfulTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspiciousActivityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    totalRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReviews(overrides?: CallOverrides): Promise<BigNumber>;

    totalSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifiedModerators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addModerator(
      moderator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateWeightedScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castHelpfulVote(
      reviewId: PromiseOrValue<BigNumberish>,
      isHelpful: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getReputationScore(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopSellers(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReviews(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReviewed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    helpfulVoteWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReviewsPerDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minReviewInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moderatorMinReputation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moderatorReputationThreshold(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextReviewId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordSuccessfulTransaction(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeModerator(
      moderator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    responseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewHasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewVerificationReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviews(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxReviewsPerDay(
      newMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinReviewInterval(
      newInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setModeratorMinReputation(
      newMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSuspiciousActivityThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitReview(
      reviewee: PromiseOrValue<string>,
      orderId: PromiseOrValue<BigNumberish>,
      rating: PromiseOrValue<BigNumberish>,
      ipfsHash: PromiseOrValue<string>,
      isVerifiedPurchase: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    successfulTransactions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    suspendUser(
      user: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspiciousActivityThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReviews(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userReviews(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifiedModerators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyReview(
      reviewId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
