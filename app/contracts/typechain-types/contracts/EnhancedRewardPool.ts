/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EnhancedRewardPoolInterface extends utils.Interface {
  functions: {
    "CONTENT_REWARDS()": FunctionFragment;
    "GOVERNANCE_REWARDS()": FunctionFragment;
    "REFERRAL_REWARDS()": FunctionFragment;
    "STAKING_REWARDS()": FunctionFragment;
    "TRADING_REWARDS()": FunctionFragment;
    "addRewardCategory(string,uint256)": FunctionFragment;
    "batchCalculateRewards(address[],uint256,uint256,uint256[])": FunctionFragment;
    "calculateReward(address,uint256,uint256,uint256)": FunctionFragment;
    "claimMultipleEpochs(uint256[])": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "epochs(uint256)": FunctionFragment;
    "finalizeEpoch(uint256)": FunctionFragment;
    "fundEpoch(uint256)": FunctionFragment;
    "getEpochInfo(uint256)": FunctionFragment;
    "getRewardCategory(uint256)": FunctionFragment;
    "getUserEpochRewards(address,uint256)": FunctionFragment;
    "getUserStats(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "ldaoToken()": FunctionFragment;
    "minimumFunding()": FunctionFragment;
    "nextCategoryId()": FunctionFragment;
    "nextEpochId()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reputationMultiplier()": FunctionFragment;
    "reputationSystem()": FunctionFragment;
    "rewardCategories(uint256)": FunctionFragment;
    "totalPoolBalance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateGovernanceParameter(string,uint256)": FunctionFragment;
    "updateRewardCategory(uint256,uint256,bool)": FunctionFragment;
    "userStats(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTENT_REWARDS"
      | "GOVERNANCE_REWARDS"
      | "REFERRAL_REWARDS"
      | "STAKING_REWARDS"
      | "TRADING_REWARDS"
      | "addRewardCategory"
      | "batchCalculateRewards"
      | "calculateReward"
      | "claimMultipleEpochs"
      | "claimRewards"
      | "currentEpoch"
      | "emergencyWithdraw"
      | "epochDuration"
      | "epochs"
      | "finalizeEpoch"
      | "fundEpoch"
      | "getEpochInfo"
      | "getRewardCategory"
      | "getUserEpochRewards"
      | "getUserStats"
      | "governance"
      | "ldaoToken"
      | "minimumFunding"
      | "nextCategoryId"
      | "nextEpochId"
      | "owner"
      | "renounceOwnership"
      | "reputationMultiplier"
      | "reputationSystem"
      | "rewardCategories"
      | "totalPoolBalance"
      | "transferOwnership"
      | "updateGovernanceParameter"
      | "updateRewardCategory"
      | "userStats"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTENT_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADING_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardCategory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCalculateRewards",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleEpochs",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardCategory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEpochRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ldaoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextCategoryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCategories",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceParameter",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardCategory",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTENT_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNANCE_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADING_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCalculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEpochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ldaoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCategoryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;

  events: {
    "CategoryAdded(uint256,string,uint256)": EventFragment;
    "CategoryUpdated(uint256,uint256,bool)": EventFragment;
    "EpochFinalized(uint256,uint256,uint256)": EventFragment;
    "EpochStarted(uint256,uint256,uint256)": EventFragment;
    "Funded(uint256,address,uint256)": EventFragment;
    "GovernanceParameterUpdated(string,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardCalculated(uint256,address,uint256,uint256)": EventFragment;
    "RewardClaimed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CategoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export interface CategoryAddedEventObject {
  categoryId: BigNumber;
  name: string;
  weight: BigNumber;
}
export type CategoryAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  CategoryAddedEventObject
>;

export type CategoryAddedEventFilter = TypedEventFilter<CategoryAddedEvent>;

export interface CategoryUpdatedEventObject {
  categoryId: BigNumber;
  newWeight: BigNumber;
  active: boolean;
}
export type CategoryUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  CategoryUpdatedEventObject
>;

export type CategoryUpdatedEventFilter = TypedEventFilter<CategoryUpdatedEvent>;

export interface EpochFinalizedEventObject {
  epochId: BigNumber;
  totalRewards: BigNumber;
  participantCount: BigNumber;
}
export type EpochFinalizedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  EpochFinalizedEventObject
>;

export type EpochFinalizedEventFilter = TypedEventFilter<EpochFinalizedEvent>;

export interface EpochStartedEventObject {
  epochId: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
}
export type EpochStartedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  EpochStartedEventObject
>;

export type EpochStartedEventFilter = TypedEventFilter<EpochStartedEvent>;

export interface FundedEventObject {
  epochId: BigNumber;
  funder: string;
  amount: BigNumber;
}
export type FundedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  FundedEventObject
>;

export type FundedEventFilter = TypedEventFilter<FundedEvent>;

export interface GovernanceParameterUpdatedEventObject {
  parameter: string;
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type GovernanceParameterUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GovernanceParameterUpdatedEventObject
>;

export type GovernanceParameterUpdatedEventFilter =
  TypedEventFilter<GovernanceParameterUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardCalculatedEventObject {
  epochId: BigNumber;
  user: string;
  amount: BigNumber;
  category: BigNumber;
}
export type RewardCalculatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RewardCalculatedEventObject
>;

export type RewardCalculatedEventFilter =
  TypedEventFilter<RewardCalculatedEvent>;

export interface RewardClaimedEventObject {
  user: string;
  epochId: BigNumber;
  amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface EnhancedRewardPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EnhancedRewardPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTENT_REWARDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    GOVERNANCE_REWARDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    REFERRAL_REWARDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKING_REWARDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRADING_REWARDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRewardCategory(
      name: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchCalculateRewards(
      users: PromiseOrValue<string>[],
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateReward(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMultipleEpochs(
      epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        totalFunding: BigNumber;
        totalRewards: BigNumber;
        participantCount: BigNumber;
        finalized: boolean;
      }
    >;

    finalizeEpoch(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundEpoch(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEpochInfo(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        totalFunding: BigNumber;
        totalRewards: BigNumber;
        participantCount: BigNumber;
        finalized: boolean;
      }
    >;

    getRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        name: string;
        weight: BigNumber;
        active: boolean;
        totalDistributed: BigNumber;
      }
    >;

    getUserEpochRewards(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalEarned: BigNumber;
        totalClaimed: BigNumber;
        lastClaimEpoch: BigNumber;
        participationCount: BigNumber;
        reputationBonus: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    ldaoToken(overrides?: CallOverrides): Promise<[string]>;

    minimumFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextCategoryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reputationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    reputationSystem(overrides?: CallOverrides): Promise<[string]>;

    rewardCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        name: string;
        weight: BigNumber;
        active: boolean;
        totalDistributed: BigNumber;
      }
    >;

    totalPoolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateGovernanceParameter(
      parameter: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      newWeight: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalEarned: BigNumber;
        totalClaimed: BigNumber;
        lastClaimEpoch: BigNumber;
        participationCount: BigNumber;
        reputationBonus: BigNumber;
      }
    >;
  };

  CONTENT_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

  GOVERNANCE_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

  REFERRAL_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

  STAKING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

  TRADING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

  addRewardCategory(
    name: PromiseOrValue<string>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchCalculateRewards(
    users: PromiseOrValue<string>[],
    epochId: PromiseOrValue<BigNumberish>,
    category: PromiseOrValue<BigNumberish>,
    baseAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateReward(
    user: PromiseOrValue<string>,
    epochId: PromiseOrValue<BigNumberish>,
    category: PromiseOrValue<BigNumberish>,
    baseAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMultipleEpochs(
    epochIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    epochId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  epochs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      totalFunding: BigNumber;
      totalRewards: BigNumber;
      participantCount: BigNumber;
      finalized: boolean;
    }
  >;

  finalizeEpoch(
    epochId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundEpoch(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEpochInfo(
    epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      totalFunding: BigNumber;
      totalRewards: BigNumber;
      participantCount: BigNumber;
      finalized: boolean;
    }
  >;

  getRewardCategory(
    categoryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber] & {
      name: string;
      weight: BigNumber;
      active: boolean;
      totalDistributed: BigNumber;
    }
  >;

  getUserEpochRewards(
    user: PromiseOrValue<string>,
    epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getUserStats(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalEarned: BigNumber;
      totalClaimed: BigNumber;
      lastClaimEpoch: BigNumber;
      participationCount: BigNumber;
      reputationBonus: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  ldaoToken(overrides?: CallOverrides): Promise<string>;

  minimumFunding(overrides?: CallOverrides): Promise<BigNumber>;

  nextCategoryId(overrides?: CallOverrides): Promise<BigNumber>;

  nextEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reputationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  reputationSystem(overrides?: CallOverrides): Promise<string>;

  rewardCategories(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber] & {
      name: string;
      weight: BigNumber;
      active: boolean;
      totalDistributed: BigNumber;
    }
  >;

  totalPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateGovernanceParameter(
    parameter: PromiseOrValue<string>,
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardCategory(
    categoryId: PromiseOrValue<BigNumberish>,
    newWeight: PromiseOrValue<BigNumberish>,
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userStats(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalEarned: BigNumber;
      totalClaimed: BigNumber;
      lastClaimEpoch: BigNumber;
      participationCount: BigNumber;
      reputationBonus: BigNumber;
    }
  >;

  callStatic: {
    CONTENT_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    TRADING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardCategory(
      name: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchCalculateRewards(
      users: PromiseOrValue<string>[],
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateReward(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMultipleEpochs(
      epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        totalFunding: BigNumber;
        totalRewards: BigNumber;
        participantCount: BigNumber;
        finalized: boolean;
      }
    >;

    finalizeEpoch(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundEpoch(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEpochInfo(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        totalFunding: BigNumber;
        totalRewards: BigNumber;
        participantCount: BigNumber;
        finalized: boolean;
      }
    >;

    getRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        name: string;
        weight: BigNumber;
        active: boolean;
        totalDistributed: BigNumber;
      }
    >;

    getUserEpochRewards(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getUserStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalEarned: BigNumber;
        totalClaimed: BigNumber;
        lastClaimEpoch: BigNumber;
        participationCount: BigNumber;
        reputationBonus: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    ldaoToken(overrides?: CallOverrides): Promise<string>;

    minimumFunding(overrides?: CallOverrides): Promise<BigNumber>;

    nextCategoryId(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reputationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    reputationSystem(overrides?: CallOverrides): Promise<string>;

    rewardCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        name: string;
        weight: BigNumber;
        active: boolean;
        totalDistributed: BigNumber;
      }
    >;

    totalPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGovernanceParameter(
      parameter: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      newWeight: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalEarned: BigNumber;
        totalClaimed: BigNumber;
        lastClaimEpoch: BigNumber;
        participationCount: BigNumber;
        reputationBonus: BigNumber;
      }
    >;
  };

  filters: {
    "CategoryAdded(uint256,string,uint256)"(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      weight?: null
    ): CategoryAddedEventFilter;
    CategoryAdded(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      weight?: null
    ): CategoryAddedEventFilter;

    "CategoryUpdated(uint256,uint256,bool)"(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      newWeight?: null,
      active?: null
    ): CategoryUpdatedEventFilter;
    CategoryUpdated(
      categoryId?: PromiseOrValue<BigNumberish> | null,
      newWeight?: null,
      active?: null
    ): CategoryUpdatedEventFilter;

    "EpochFinalized(uint256,uint256,uint256)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      totalRewards?: null,
      participantCount?: null
    ): EpochFinalizedEventFilter;
    EpochFinalized(
      epochId?: PromiseOrValue<BigNumberish> | null,
      totalRewards?: null,
      participantCount?: null
    ): EpochFinalizedEventFilter;

    "EpochStarted(uint256,uint256,uint256)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null
    ): EpochStartedEventFilter;
    EpochStarted(
      epochId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null
    ): EpochStartedEventFilter;

    "Funded(uint256,address,uint256)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: null
    ): FundedEventFilter;
    Funded(
      epochId?: PromiseOrValue<BigNumberish> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: null
    ): FundedEventFilter;

    "GovernanceParameterUpdated(string,uint256,uint256)"(
      parameter?: null,
      oldValue?: null,
      newValue?: null
    ): GovernanceParameterUpdatedEventFilter;
    GovernanceParameterUpdated(
      parameter?: null,
      oldValue?: null,
      newValue?: null
    ): GovernanceParameterUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RewardCalculated(uint256,address,uint256,uint256)"(
      epochId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      category?: null
    ): RewardCalculatedEventFilter;
    RewardCalculated(
      epochId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      category?: null
    ): RewardCalculatedEventFilter;

    "RewardClaimed(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      user?: PromiseOrValue<string> | null,
      epochId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardClaimedEventFilter;
  };

  estimateGas: {
    CONTENT_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNANCE_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    TRADING_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardCategory(
      name: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchCalculateRewards(
      users: PromiseOrValue<string>[],
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateReward(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMultipleEpochs(
      epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeEpoch(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundEpoch(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEpochInfo(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserEpochRewards(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    ldaoToken(overrides?: CallOverrides): Promise<BigNumber>;

    minimumFunding(overrides?: CallOverrides): Promise<BigNumber>;

    nextCategoryId(overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reputationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    reputationSystem(overrides?: CallOverrides): Promise<BigNumber>;

    rewardCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateGovernanceParameter(
      parameter: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      newWeight: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTENT_REWARDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVERNANCE_REWARDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REFERRAL_REWARDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKING_REWARDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRADING_REWARDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardCategory(
      name: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchCalculateRewards(
      users: PromiseOrValue<string>[],
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateReward(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      category: PromiseOrValue<BigNumberish>,
      baseAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMultipleEpochs(
      epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeEpoch(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundEpoch(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEpochInfo(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEpochRewards(
      user: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ldaoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextCategoryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextEpochId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reputationMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reputationSystem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardCategories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPoolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateGovernanceParameter(
      parameter: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardCategory(
      categoryId: PromiseOrValue<BigNumberish>,
      newWeight: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
