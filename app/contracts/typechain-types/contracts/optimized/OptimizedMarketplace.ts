/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OptimizedMarketplaceInterface extends utils.Interface {
  functions: {
    "batchCreateListings(address[],uint256[],uint256[],uint256[],uint8[],uint8[])": FunctionFragment;
    "batchPurchaseItems(uint256[],uint256[])": FunctionFragment;
    "createListing(address,uint256,uint256,uint256,uint8,uint8)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "estimateListingGas(uint8,uint8)": FunctionFragment;
    "getContractState()": FunctionFragment;
    "getListing(uint256)": FunctionFragment;
    "getUserListings(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "purchaseItem(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeBasisPoints(uint32)": FunctionFragment;
    "setMaxListingsPerUser(uint16)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchCreateListings"
      | "batchPurchaseItems"
      | "createListing"
      | "emergencyWithdraw"
      | "estimateListingGas"
      | "getContractState"
      | "getListing"
      | "getUserListings"
      | "owner"
      | "pause"
      | "paused"
      | "purchaseItem"
      | "renounceOwnership"
      | "setFeeBasisPoints"
      | "setMaxListingsPerUser"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchCreateListings",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchPurchaseItems",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateListingGas",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserListings",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseItem",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxListingsPerUser",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchCreateListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchPurchaseItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateListingGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxListingsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "BatchListingsCreated(address,uint256,uint256)": EventFragment;
    "ItemPurchased(uint256,address,address,uint256,uint256)": EventFragment;
    "ListingCreated(uint256,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchListingsCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BatchListingsCreatedEventObject {
  seller: string;
  startId: BigNumber;
  count: BigNumber;
}
export type BatchListingsCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BatchListingsCreatedEventObject
>;

export type BatchListingsCreatedEventFilter =
  TypedEventFilter<BatchListingsCreatedEvent>;

export interface ItemPurchasedEventObject {
  listingId: BigNumber;
  buyer: string;
  seller: string;
  quantity: BigNumber;
  totalPrice: BigNumber;
}
export type ItemPurchasedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  ItemPurchasedEventObject
>;

export type ItemPurchasedEventFilter = TypedEventFilter<ItemPurchasedEvent>;

export interface ListingCreatedEventObject {
  listingId: BigNumber;
  seller: string;
  tokenAddress: string;
  price: BigNumber;
  quantity: BigNumber;
}
export type ListingCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  ListingCreatedEventObject
>;

export type ListingCreatedEventFilter = TypedEventFilter<ListingCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface OptimizedMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimizedMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchCreateListings(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      itemTypes: PromiseOrValue<BigNumberish>[],
      listingTypes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchPurchaseItems(
      listingIds: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateListingGas(
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { estimatedGas: BigNumber }>;

    getContractState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalListings: BigNumber;
        nextListingId: BigNumber;
        feeBasisPoints: BigNumber;
        maxListingsPerUser: BigNumber;
      }
    >;

    getListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean
      ] & {
        seller: string;
        price: BigNumber;
        quantity: BigNumber;
        createdAt: BigNumber;
        categoryId: BigNumber;
        itemType: number;
        listingType: number;
        isActive: boolean;
      }
    >;

    getUserListings(
      user: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { listingIds: BigNumber[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchaseItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeBasisPoints(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxListingsPerUser(
      _maxListings: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchCreateListings(
    tokenAddresses: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    prices: PromiseOrValue<BigNumberish>[],
    quantities: PromiseOrValue<BigNumberish>[],
    itemTypes: PromiseOrValue<BigNumberish>[],
    listingTypes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchPurchaseItems(
    listingIds: PromiseOrValue<BigNumberish>[],
    quantities: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createListing(
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    itemType: PromiseOrValue<BigNumberish>,
    listingType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateListingGas(
    itemType: PromiseOrValue<BigNumberish>,
    listingType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getContractState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalListings: BigNumber;
      nextListingId: BigNumber;
      feeBasisPoints: BigNumber;
      maxListingsPerUser: BigNumber;
    }
  >;

  getListing(
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean
    ] & {
      seller: string;
      price: BigNumber;
      quantity: BigNumber;
      createdAt: BigNumber;
      categoryId: BigNumber;
      itemType: number;
      listingType: number;
      isActive: boolean;
    }
  >;

  getUserListings(
    user: PromiseOrValue<string>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchaseItem(
    listingId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeBasisPoints(
    _feeBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxListingsPerUser(
    _maxListings: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchCreateListings(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      itemTypes: PromiseOrValue<BigNumberish>[],
      listingTypes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    batchPurchaseItems(
      listingIds: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    estimateListingGas(
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalListings: BigNumber;
        nextListingId: BigNumber;
        feeBasisPoints: BigNumber;
        maxListingsPerUser: BigNumber;
      }
    >;

    getListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean
      ] & {
        seller: string;
        price: BigNumber;
        quantity: BigNumber;
        createdAt: BigNumber;
        categoryId: BigNumber;
        itemType: number;
        listingType: number;
        isActive: boolean;
      }
    >;

    getUserListings(
      user: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchaseItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeBasisPoints(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxListingsPerUser(
      _maxListings: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BatchListingsCreated(address,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      startId?: PromiseOrValue<BigNumberish> | null,
      count?: null
    ): BatchListingsCreatedEventFilter;
    BatchListingsCreated(
      seller?: PromiseOrValue<string> | null,
      startId?: PromiseOrValue<BigNumberish> | null,
      count?: null
    ): BatchListingsCreatedEventFilter;

    "ItemPurchased(uint256,address,address,uint256,uint256)"(
      listingId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      quantity?: null,
      totalPrice?: null
    ): ItemPurchasedEventFilter;
    ItemPurchased(
      listingId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      quantity?: null,
      totalPrice?: null
    ): ItemPurchasedEventFilter;

    "ListingCreated(uint256,address,address,uint256,uint256)"(
      listingId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      price?: null,
      quantity?: null
    ): ListingCreatedEventFilter;
    ListingCreated(
      listingId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      price?: null,
      quantity?: null
    ): ListingCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    batchCreateListings(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      itemTypes: PromiseOrValue<BigNumberish>[],
      listingTypes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchPurchaseItems(
      listingIds: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateListingGas(
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractState(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserListings(
      user: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeBasisPoints(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxListingsPerUser(
      _maxListings: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchCreateListings(
      tokenAddresses: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      itemTypes: PromiseOrValue<BigNumberish>[],
      listingTypes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchPurchaseItems(
      listingIds: PromiseOrValue<BigNumberish>[],
      quantities: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateListingGas(
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserListings(
      user: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBasisPoints(
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxListingsPerUser(
      _maxListings: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
