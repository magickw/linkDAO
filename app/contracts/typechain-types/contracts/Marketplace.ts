/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Marketplace {
  export type ListingStruct = {
    id: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    tokenAddress: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    quantity: PromiseOrValue<BigNumberish>;
    itemType: PromiseOrValue<BigNumberish>;
    listingType: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    highestBid: PromiseOrValue<BigNumberish>;
    highestBidder: PromiseOrValue<string>;
    metadataURI: PromiseOrValue<string>;
    isEscrowed: PromiseOrValue<boolean>;
    nftStandard: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    reservePrice: PromiseOrValue<BigNumberish>;
    minIncrement: PromiseOrValue<BigNumberish>;
    reserveMet: PromiseOrValue<boolean>;
  };

  export type ListingStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    id: BigNumber;
    seller: string;
    tokenAddress: string;
    price: BigNumber;
    quantity: BigNumber;
    itemType: number;
    listingType: number;
    status: number;
    startTime: BigNumber;
    endTime: BigNumber;
    highestBid: BigNumber;
    highestBidder: string;
    metadataURI: string;
    isEscrowed: boolean;
    nftStandard: number;
    tokenId: BigNumber;
    reservePrice: BigNumber;
    minIncrement: BigNumber;
    reserveMet: boolean;
  };

  export type BidStruct = {
    bidder: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type BidStructOutput = [string, BigNumber, BigNumber] & {
    bidder: string;
    amount: BigNumber;
    timestamp: BigNumber;
  };

  export type DisputeStruct = {
    id: PromiseOrValue<BigNumberish>;
    orderId: PromiseOrValue<BigNumberish>;
    complainant: PromiseOrValue<string>;
    respondent: PromiseOrValue<string>;
    reason: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    resolved: PromiseOrValue<boolean>;
    resolver: PromiseOrValue<string>;
    resolution: PromiseOrValue<string>;
  };

  export type DisputeStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    boolean,
    string,
    string
  ] & {
    id: BigNumber;
    orderId: BigNumber;
    complainant: string;
    respondent: string;
    reason: string;
    createdAt: BigNumber;
    resolved: boolean;
    resolver: string;
    resolution: string;
  };

  export type OfferStruct = {
    id: PromiseOrValue<BigNumberish>;
    listingId: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    accepted: PromiseOrValue<boolean>;
  };

  export type OfferStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    id: BigNumber;
    listingId: BigNumber;
    buyer: string;
    amount: BigNumber;
    createdAt: BigNumber;
    accepted: boolean;
  };

  export type OrderStruct = {
    id: PromiseOrValue<BigNumberish>;
    listingId: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    seller: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    paymentToken: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    shippingInfo: PromiseOrValue<string>;
    trackingNumber: PromiseOrValue<string>;
  };

  export type OrderStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    id: BigNumber;
    listingId: BigNumber;
    buyer: string;
    seller: string;
    amount: BigNumber;
    paymentToken: string;
    status: number;
    createdAt: BigNumber;
    updatedAt: BigNumber;
    shippingInfo: string;
    trackingNumber: string;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "AUCTION_EXTENSION_TIME()": FunctionFragment;
    "MAX_PLATFORM_FEE()": FunctionFragment;
    "acceptOffer(uint256,uint256)": FunctionFragment;
    "buyItem(uint256,uint256)": FunctionFragment;
    "cancelListing(uint256)": FunctionFragment;
    "createListing(address,uint256,uint256,uint8,uint8,uint256,string)": FunctionFragment;
    "daoApprovedVendors(address)": FunctionFragment;
    "disputes(uint256)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "escrowContract()": FunctionFragment;
    "getActiveListings(uint256,uint256)": FunctionFragment;
    "getBids(uint256)": FunctionFragment;
    "getDispute(uint256)": FunctionFragment;
    "getOffers(uint256)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "ldaoToken()": FunctionFragment;
    "listingBids(uint256,uint256)": FunctionFragment;
    "listingOffers(uint256,uint256)": FunctionFragment;
    "listings(uint256)": FunctionFragment;
    "makeOffer(uint256,uint256)": FunctionFragment;
    "minReputationScore()": FunctionFragment;
    "nextDisputeId()": FunctionFragment;
    "nextListingId()": FunctionFragment;
    "nextOfferId()": FunctionFragment;
    "nextOrderId()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBid(uint256)": FunctionFragment;
    "platformFeePercentage()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reputationScores(address)": FunctionFragment;
    "setAuctionExtensionTime(uint256)": FunctionFragment;
    "setDAOApprovedVendor(address,bool)": FunctionFragment;
    "setEscrowContract(address)": FunctionFragment;
    "setMinReputationScore(uint256)": FunctionFragment;
    "setPlatformFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateListingPrice(uint256,uint256)": FunctionFragment;
    "updateReputationScore(address,uint256)": FunctionFragment;
    "userListings(address,uint256)": FunctionFragment;
    "userOrders(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AUCTION_EXTENSION_TIME"
      | "MAX_PLATFORM_FEE"
      | "acceptOffer"
      | "buyItem"
      | "cancelListing"
      | "createListing"
      | "daoApprovedVendors"
      | "disputes"
      | "endAuction"
      | "escrowContract"
      | "getActiveListings"
      | "getBids"
      | "getDispute"
      | "getOffers"
      | "getOrder"
      | "ldaoToken"
      | "listingBids"
      | "listingOffers"
      | "listings"
      | "makeOffer"
      | "minReputationScore"
      | "nextDisputeId"
      | "nextListingId"
      | "nextOfferId"
      | "nextOrderId"
      | "orders"
      | "owner"
      | "placeBid"
      | "platformFeePercentage"
      | "renounceOwnership"
      | "reputationScores"
      | "setAuctionExtensionTime"
      | "setDAOApprovedVendor"
      | "setEscrowContract"
      | "setMinReputationScore"
      | "setPlatformFee"
      | "transferOwnership"
      | "updateListingPrice"
      | "updateReputationScore"
      | "userListings"
      | "userOrders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AUCTION_EXTENSION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyItem",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createListing",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daoApprovedVendors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ldaoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listingBids",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listingOffers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minReputationScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextDisputeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextListingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationScores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionExtensionTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOApprovedVendor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEscrowContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReputationScore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListingPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputationScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_EXTENSION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoApprovedVendors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDispute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ldaoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextDisputeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionExtensionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDAOApprovedVendor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEscrowContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;

  events: {
    "AuctionEnded(uint256,address,uint256)": EventFragment;
    "BidPlaced(uint256,address,uint256)": EventFragment;
    "DisputeCreated(uint256,uint256,address)": EventFragment;
    "DisputeResolved(uint256,string)": EventFragment;
    "ListingCancelled(uint256)": EventFragment;
    "ListingCreated(uint256,address,uint256,uint8)": EventFragment;
    "ListingUpdated(uint256,uint256)": EventFragment;
    "OfferAccepted(uint256,uint256)": EventFragment;
    "OfferMade(uint256,uint256,address,uint256)": EventFragment;
    "OrderCreated(uint256,uint256,address)": EventFragment;
    "OrderStatusUpdated(uint256,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReputationUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationUpdated"): EventFragment;
}

export interface AuctionEndedEventObject {
  listingId: BigNumber;
  winner: string;
  amount: BigNumber;
}
export type AuctionEndedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface BidPlacedEventObject {
  listingId: BigNumber;
  bidder: string;
  amount: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface DisputeCreatedEventObject {
  disputeId: BigNumber;
  orderId: BigNumber;
  complainant: string;
}
export type DisputeCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DisputeCreatedEventObject
>;

export type DisputeCreatedEventFilter = TypedEventFilter<DisputeCreatedEvent>;

export interface DisputeResolvedEventObject {
  disputeId: BigNumber;
  resolution: string;
}
export type DisputeResolvedEvent = TypedEvent<
  [BigNumber, string],
  DisputeResolvedEventObject
>;

export type DisputeResolvedEventFilter = TypedEventFilter<DisputeResolvedEvent>;

export interface ListingCancelledEventObject {
  listingId: BigNumber;
}
export type ListingCancelledEvent = TypedEvent<
  [BigNumber],
  ListingCancelledEventObject
>;

export type ListingCancelledEventFilter =
  TypedEventFilter<ListingCancelledEvent>;

export interface ListingCreatedEventObject {
  listingId: BigNumber;
  seller: string;
  price: BigNumber;
  itemType: number;
}
export type ListingCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, number],
  ListingCreatedEventObject
>;

export type ListingCreatedEventFilter = TypedEventFilter<ListingCreatedEvent>;

export interface ListingUpdatedEventObject {
  listingId: BigNumber;
  newPrice: BigNumber;
}
export type ListingUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ListingUpdatedEventObject
>;

export type ListingUpdatedEventFilter = TypedEventFilter<ListingUpdatedEvent>;

export interface OfferAcceptedEventObject {
  offerId: BigNumber;
  listingId: BigNumber;
}
export type OfferAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferMadeEventObject {
  offerId: BigNumber;
  listingId: BigNumber;
  buyer: string;
  amount: BigNumber;
}
export type OfferMadeEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  OfferMadeEventObject
>;

export type OfferMadeEventFilter = TypedEventFilter<OfferMadeEvent>;

export interface OrderCreatedEventObject {
  orderId: BigNumber;
  listingId: BigNumber;
  buyer: string;
}
export type OrderCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderStatusUpdatedEventObject {
  orderId: BigNumber;
  status: number;
}
export type OrderStatusUpdatedEvent = TypedEvent<
  [BigNumber, number],
  OrderStatusUpdatedEventObject
>;

export type OrderStatusUpdatedEventFilter =
  TypedEventFilter<OrderStatusUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReputationUpdatedEventObject {
  user: string;
  newScore: BigNumber;
}
export type ReputationUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ReputationUpdatedEventObject
>;

export type ReputationUpdatedEventFilter =
  TypedEventFilter<ReputationUpdatedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUCTION_EXTENSION_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOffer(
      listingId: PromiseOrValue<BigNumberish>,
      offerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoApprovedVendors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        boolean,
        string,
        string
      ] & {
        id: BigNumber;
        orderId: BigNumber;
        complainant: string;
        respondent: string;
        reason: string;
        createdAt: BigNumber;
        resolved: boolean;
        resolver: string;
        resolution: string;
      }
    >;

    endAuction(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowContract(overrides?: CallOverrides): Promise<[string]>;

    getActiveListings(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.ListingStructOutput[]]>;

    getBids(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.BidStructOutput[]]>;

    getDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.DisputeStructOutput]>;

    getOffers(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.OfferStructOutput[]]>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Marketplace.OrderStructOutput]>;

    ldaoToken(overrides?: CallOverrides): Promise<[string]>;

    listingBids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    listingOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        listingId: BigNumber;
        buyer: string;
        amount: BigNumber;
        createdAt: BigNumber;
        accepted: boolean;
      }
    >;

    listings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        seller: string;
        tokenAddress: string;
        price: BigNumber;
        quantity: BigNumber;
        itemType: number;
        listingType: number;
        status: number;
        startTime: BigNumber;
        endTime: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        metadataURI: string;
        isEscrowed: boolean;
        nftStandard: number;
        tokenId: BigNumber;
        reservePrice: BigNumber;
        minIncrement: BigNumber;
        reserveMet: boolean;
      }
    >;

    makeOffer(
      listingId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minReputationScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextDisputeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextListingId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextOfferId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        id: BigNumber;
        listingId: BigNumber;
        buyer: string;
        seller: string;
        amount: BigNumber;
        paymentToken: string;
        status: number;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        shippingInfo: string;
        trackingNumber: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBid(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    platformFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAuctionExtensionTime(
      newTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDAOApprovedVendor(
      vendor: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEscrowContract(
      _escrowContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinReputationScore(
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateListingPrice(
      listingId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReputationScore(
      user: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userListings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  AUCTION_EXTENSION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOffer(
    listingId: PromiseOrValue<BigNumberish>,
    offerIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyItem(
    listingId: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelListing(
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createListing(
    tokenAddress: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    quantity: PromiseOrValue<BigNumberish>,
    itemType: PromiseOrValue<BigNumberish>,
    listingType: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    metadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoApprovedVendors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disputes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      boolean,
      string,
      string
    ] & {
      id: BigNumber;
      orderId: BigNumber;
      complainant: string;
      respondent: string;
      reason: string;
      createdAt: BigNumber;
      resolved: boolean;
      resolver: string;
      resolution: string;
    }
  >;

  endAuction(
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowContract(overrides?: CallOverrides): Promise<string>;

  getActiveListings(
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.ListingStructOutput[]>;

  getBids(
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.BidStructOutput[]>;

  getDispute(
    disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.DisputeStructOutput>;

  getOffers(
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.OfferStructOutput[]>;

  getOrder(
    orderId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Marketplace.OrderStructOutput>;

  ldaoToken(overrides?: CallOverrides): Promise<string>;

  listingBids(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      bidder: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  listingOffers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, boolean] & {
      id: BigNumber;
      listingId: BigNumber;
      buyer: string;
      amount: BigNumber;
      createdAt: BigNumber;
      accepted: boolean;
    }
  >;

  listings(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      seller: string;
      tokenAddress: string;
      price: BigNumber;
      quantity: BigNumber;
      itemType: number;
      listingType: number;
      status: number;
      startTime: BigNumber;
      endTime: BigNumber;
      highestBid: BigNumber;
      highestBidder: string;
      metadataURI: string;
      isEscrowed: boolean;
      nftStandard: number;
      tokenId: BigNumber;
      reservePrice: BigNumber;
      minIncrement: BigNumber;
      reserveMet: boolean;
    }
  >;

  makeOffer(
    listingId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minReputationScore(overrides?: CallOverrides): Promise<BigNumber>;

  nextDisputeId(overrides?: CallOverrides): Promise<BigNumber>;

  nextListingId(overrides?: CallOverrides): Promise<BigNumber>;

  nextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

  nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      string,
      number,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      id: BigNumber;
      listingId: BigNumber;
      buyer: string;
      seller: string;
      amount: BigNumber;
      paymentToken: string;
      status: number;
      createdAt: BigNumber;
      updatedAt: BigNumber;
      shippingInfo: string;
      trackingNumber: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBid(
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reputationScores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAuctionExtensionTime(
    newTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDAOApprovedVendor(
    vendor: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEscrowContract(
    _escrowContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinReputationScore(
    newScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateListingPrice(
    listingId: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReputationScore(
    user: PromiseOrValue<string>,
    score: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userListings(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userOrders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    AUCTION_EXTENSION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOffer(
      listingId: PromiseOrValue<BigNumberish>,
      offerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoApprovedVendors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        boolean,
        string,
        string
      ] & {
        id: BigNumber;
        orderId: BigNumber;
        complainant: string;
        respondent: string;
        reason: string;
        createdAt: BigNumber;
        resolved: boolean;
        resolver: string;
        resolution: string;
      }
    >;

    endAuction(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrowContract(overrides?: CallOverrides): Promise<string>;

    getActiveListings(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.ListingStructOutput[]>;

    getBids(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.BidStructOutput[]>;

    getDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.DisputeStructOutput>;

    getOffers(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.OfferStructOutput[]>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Marketplace.OrderStructOutput>;

    ldaoToken(overrides?: CallOverrides): Promise<string>;

    listingBids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    listingOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, boolean] & {
        id: BigNumber;
        listingId: BigNumber;
        buyer: string;
        amount: BigNumber;
        createdAt: BigNumber;
        accepted: boolean;
      }
    >;

    listings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        seller: string;
        tokenAddress: string;
        price: BigNumber;
        quantity: BigNumber;
        itemType: number;
        listingType: number;
        status: number;
        startTime: BigNumber;
        endTime: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        metadataURI: string;
        isEscrowed: boolean;
        nftStandard: number;
        tokenId: BigNumber;
        reservePrice: BigNumber;
        minIncrement: BigNumber;
        reserveMet: boolean;
      }
    >;

    makeOffer(
      listingId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minReputationScore(overrides?: CallOverrides): Promise<BigNumber>;

    nextDisputeId(overrides?: CallOverrides): Promise<BigNumber>;

    nextListingId(overrides?: CallOverrides): Promise<BigNumber>;

    nextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        id: BigNumber;
        listingId: BigNumber;
        buyer: string;
        seller: string;
        amount: BigNumber;
        paymentToken: string;
        status: number;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        shippingInfo: string;
        trackingNumber: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBid(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuctionExtensionTime(
      newTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDAOApprovedVendor(
      vendor: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEscrowContract(
      _escrowContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReputationScore(
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateListingPrice(
      listingId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReputationScore(
      user: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userListings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AuctionEnded(uint256,address,uint256)"(
      listingId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(
      listingId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionEndedEventFilter;

    "BidPlaced(uint256,address,uint256)"(
      listingId?: PromiseOrValue<BigNumberish> | null,
      bidder?: PromiseOrValue<string> | null,
      amount?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      listingId?: PromiseOrValue<BigNumberish> | null,
      bidder?: PromiseOrValue<string> | null,
      amount?: null
    ): BidPlacedEventFilter;

    "DisputeCreated(uint256,uint256,address)"(
      disputeId?: PromiseOrValue<BigNumberish> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      complainant?: PromiseOrValue<string> | null
    ): DisputeCreatedEventFilter;
    DisputeCreated(
      disputeId?: PromiseOrValue<BigNumberish> | null,
      orderId?: PromiseOrValue<BigNumberish> | null,
      complainant?: PromiseOrValue<string> | null
    ): DisputeCreatedEventFilter;

    "DisputeResolved(uint256,string)"(
      disputeId?: PromiseOrValue<BigNumberish> | null,
      resolution?: null
    ): DisputeResolvedEventFilter;
    DisputeResolved(
      disputeId?: PromiseOrValue<BigNumberish> | null,
      resolution?: null
    ): DisputeResolvedEventFilter;

    "ListingCancelled(uint256)"(
      listingId?: PromiseOrValue<BigNumberish> | null
    ): ListingCancelledEventFilter;
    ListingCancelled(
      listingId?: PromiseOrValue<BigNumberish> | null
    ): ListingCancelledEventFilter;

    "ListingCreated(uint256,address,uint256,uint8)"(
      listingId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      price?: null,
      itemType?: null
    ): ListingCreatedEventFilter;
    ListingCreated(
      listingId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      price?: null,
      itemType?: null
    ): ListingCreatedEventFilter;

    "ListingUpdated(uint256,uint256)"(
      listingId?: PromiseOrValue<BigNumberish> | null,
      newPrice?: null
    ): ListingUpdatedEventFilter;
    ListingUpdated(
      listingId?: PromiseOrValue<BigNumberish> | null,
      newPrice?: null
    ): ListingUpdatedEventFilter;

    "OfferAccepted(uint256,uint256)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      offerId?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null
    ): OfferAcceptedEventFilter;

    "OfferMade(uint256,uint256,address,uint256)"(
      offerId?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      amount?: null
    ): OfferMadeEventFilter;
    OfferMade(
      offerId?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null,
      amount?: null
    ): OfferMadeEventFilter;

    "OrderCreated(uint256,uint256,address)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null,
      buyer?: PromiseOrValue<string> | null
    ): OrderCreatedEventFilter;

    "OrderStatusUpdated(uint256,uint8)"(
      orderId?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): OrderStatusUpdatedEventFilter;
    OrderStatusUpdated(
      orderId?: PromiseOrValue<BigNumberish> | null,
      status?: null
    ): OrderStatusUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReputationUpdated(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      newScore?: null
    ): ReputationUpdatedEventFilter;
    ReputationUpdated(
      user?: PromiseOrValue<string> | null,
      newScore?: null
    ): ReputationUpdatedEventFilter;
  };

  estimateGas: {
    AUCTION_EXTENSION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOffer(
      listingId: PromiseOrValue<BigNumberish>,
      offerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoApprovedVendors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endAuction(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowContract(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveListings(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBids(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffers(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ldaoToken(overrides?: CallOverrides): Promise<BigNumber>;

    listingBids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeOffer(
      listingId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minReputationScore(overrides?: CallOverrides): Promise<BigNumber>;

    nextDisputeId(overrides?: CallOverrides): Promise<BigNumber>;

    nextListingId(overrides?: CallOverrides): Promise<BigNumber>;

    nextOfferId(overrides?: CallOverrides): Promise<BigNumber>;

    nextOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuctionExtensionTime(
      newTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDAOApprovedVendor(
      vendor: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEscrowContract(
      _escrowContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinReputationScore(
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateListingPrice(
      listingId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReputationScore(
      user: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userListings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUCTION_EXTENSION_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOffer(
      listingId: PromiseOrValue<BigNumberish>,
      offerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyItem(
      listingId: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelListing(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createListing(
      tokenAddress: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      quantity: PromiseOrValue<BigNumberish>,
      itemType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoApprovedVendors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endAuction(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveListings(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBids(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDispute(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffers(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ldaoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listingBids(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingOffers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeOffer(
      listingId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minReputationScore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextDisputeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextListingId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOfferId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBid(
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    platformFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reputationScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuctionExtensionTime(
      newTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDAOApprovedVendor(
      vendor: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEscrowContract(
      _escrowContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinReputationScore(
      newScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateListingPrice(
      listingId: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReputationScore(
      user: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userListings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOrders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
