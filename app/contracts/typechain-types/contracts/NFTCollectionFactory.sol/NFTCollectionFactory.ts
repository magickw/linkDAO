/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace NFTCollection {
  export type CollectionInfoStruct = {
    description: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    externalUrl: PromiseOrValue<string>;
    maxSupply: PromiseOrValue<BigNumberish>;
    mintPrice: PromiseOrValue<BigNumberish>;
    isPublicMint: PromiseOrValue<boolean>;
    creator: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
  };

  export type CollectionInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber
  ] & {
    description: string;
    image: string;
    externalUrl: string;
    maxSupply: BigNumber;
    mintPrice: BigNumber;
    isPublicMint: boolean;
    creator: string;
    createdAt: BigNumber;
  };
}

export declare namespace NFTCollectionFactory {
  export type CollectionDataStruct = {
    collectionAddress: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    isVerified: PromiseOrValue<boolean>;
  };

  export type CollectionDataStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    collectionAddress: string;
    creator: string;
    name: string;
    symbol: string;
    createdAt: BigNumber;
    isVerified: boolean;
  };
}

export interface NFTCollectionFactoryInterface extends utils.Interface {
  functions: {
    "allCollections(uint256)": FunctionFragment;
    "createCollection(string,string,(string,string,string,uint256,uint256,bool,address,uint256),uint256)": FunctionFragment;
    "creationFee()": FunctionFragment;
    "creatorCollections(address,uint256)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getAllCollections()": FunctionFragment;
    "getCollectionCount()": FunctionFragment;
    "getCreatorCollections(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCreationFee(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifiedCollections(address)": FunctionFragment;
    "verifyCollection(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allCollections"
      | "createCollection"
      | "creationFee"
      | "creatorCollections"
      | "feeRecipient"
      | "getAllCollections"
      | "getCollectionCount"
      | "getCreatorCollections"
      | "owner"
      | "renounceOwnership"
      | "setCreationFee"
      | "setFeeRecipient"
      | "transferOwnership"
      | "verifiedCollections"
      | "verifyCollection"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allCollections",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      NFTCollection.CollectionInfoStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCollections",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorCollections",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedCollections",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCollection",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCollection",
    data: BytesLike
  ): Result;

  events: {
    "CollectionCreated(address,address,string,string)": EventFragment;
    "CollectionVerified(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CollectionCreatedEventObject {
  collectionAddress: string;
  creator: string;
  name: string;
  symbol: string;
}
export type CollectionCreatedEvent = TypedEvent<
  [string, string, string, string],
  CollectionCreatedEventObject
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export interface CollectionVerifiedEventObject {
  collectionAddress: string;
}
export type CollectionVerifiedEvent = TypedEvent<
  [string],
  CollectionVerifiedEventObject
>;

export type CollectionVerifiedEventFilter =
  TypedEventFilter<CollectionVerifiedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTCollectionFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTCollectionFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allCollections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, boolean] & {
        collectionAddress: string;
        creator: string;
        name: string;
        symbol: string;
        createdAt: BigNumber;
        isVerified: boolean;
      }
    >;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      collectionInfo: NFTCollection.CollectionInfoStruct,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    creatorCollections(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, boolean] & {
        collectionAddress: string;
        creator: string;
        name: string;
        symbol: string;
        createdAt: BigNumber;
        isVerified: boolean;
      }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getAllCollections(
      overrides?: CallOverrides
    ): Promise<[NFTCollectionFactory.CollectionDataStructOutput[]]>;

    getCollectionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCreatorCollections(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTCollectionFactory.CollectionDataStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCreationFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifiedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allCollections(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, boolean] & {
      collectionAddress: string;
      creator: string;
      name: string;
      symbol: string;
      createdAt: BigNumber;
      isVerified: boolean;
    }
  >;

  createCollection(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    collectionInfo: NFTCollection.CollectionInfoStruct,
    royalty: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creationFee(overrides?: CallOverrides): Promise<BigNumber>;

  creatorCollections(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, boolean] & {
      collectionAddress: string;
      creator: string;
      name: string;
      symbol: string;
      createdAt: BigNumber;
      isVerified: boolean;
    }
  >;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getAllCollections(
    overrides?: CallOverrides
  ): Promise<NFTCollectionFactory.CollectionDataStructOutput[]>;

  getCollectionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCreatorCollections(
    creator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTCollectionFactory.CollectionDataStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCreationFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifiedCollections(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyCollection(
    collectionAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allCollections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, boolean] & {
        collectionAddress: string;
        creator: string;
        name: string;
        symbol: string;
        createdAt: BigNumber;
        isVerified: boolean;
      }
    >;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      collectionInfo: NFTCollection.CollectionInfoStruct,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creationFee(overrides?: CallOverrides): Promise<BigNumber>;

    creatorCollections(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, boolean] & {
        collectionAddress: string;
        creator: string;
        name: string;
        symbol: string;
        createdAt: BigNumber;
        isVerified: boolean;
      }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getAllCollections(
      overrides?: CallOverrides
    ): Promise<NFTCollectionFactory.CollectionDataStructOutput[]>;

    getCollectionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorCollections(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTCollectionFactory.CollectionDataStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCreationFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollectionCreated(address,address,string,string)"(
      collectionAddress?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      collectionAddress?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null
    ): CollectionCreatedEventFilter;

    "CollectionVerified(address)"(
      collectionAddress?: PromiseOrValue<string> | null
    ): CollectionVerifiedEventFilter;
    CollectionVerified(
      collectionAddress?: PromiseOrValue<string> | null
    ): CollectionVerifiedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    allCollections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      collectionInfo: NFTCollection.CollectionInfoStruct,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creationFee(overrides?: CallOverrides): Promise<BigNumber>;

    creatorCollections(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorCollections(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCreationFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifiedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allCollections(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCollection(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      collectionInfo: NFTCollection.CollectionInfoStruct,
      royalty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creatorCollections(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatorCollections(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCreationFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifiedCollections(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyCollection(
      collectionAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
