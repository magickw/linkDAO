/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ContractRegistryInterface extends utils.Interface {
  functions: {
    "batchRegisterContracts(bytes32[],address[],uint256[],string[],bytes32[])": FunctionFragment;
    "createCategory(bytes32,string)": FunctionFragment;
    "deactivateContract(bytes32)": FunctionFragment;
    "getActiveContracts()": FunctionFragment;
    "getAllCategories()": FunctionFragment;
    "getAllContracts()": FunctionFragment;
    "getContract(bytes32)": FunctionFragment;
    "getContractCategory(bytes32)": FunctionFragment;
    "getContractInfo(bytes32)": FunctionFragment;
    "getContractName(address)": FunctionFragment;
    "getContractVersions(bytes32)": FunctionFragment;
    "getContractsByCategory(bytes32)": FunctionFragment;
    "getMultipleContracts(bytes32[])": FunctionFragment;
    "getRegistryStats()": FunctionFragment;
    "isContractActive(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "reactivateContract(bytes32)": FunctionFragment;
    "registerContract(bytes32,address,uint256,string,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateContract(bytes32,address,uint256,string)": FunctionFragment;
    "verifyContract(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchRegisterContracts"
      | "createCategory"
      | "deactivateContract"
      | "getActiveContracts"
      | "getAllCategories"
      | "getAllContracts"
      | "getContract"
      | "getContractCategory"
      | "getContractInfo"
      | "getContractName"
      | "getContractVersions"
      | "getContractsByCategory"
      | "getMultipleContracts"
      | "getRegistryStats"
      | "isContractActive"
      | "owner"
      | "pause"
      | "paused"
      | "reactivateContract"
      | "registerContract"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "updateContract"
      | "verifyContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchRegisterContracts",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCategory",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCategory",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVersions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsByCategory",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleContracts",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistryStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isContractActive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivateContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateContract",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchRegisterContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyContract",
    data: BytesLike
  ): Result;

  events: {
    "CategoryCreated(bytes32,string)": EventFragment;
    "ContractDeactivated(bytes32,address)": EventFragment;
    "ContractReactivated(bytes32,address)": EventFragment;
    "ContractRegistered(bytes32,address,uint256,string)": EventFragment;
    "ContractUpdated(bytes32,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CategoryCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractReactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface CategoryCreatedEventObject {
  category: string;
  description: string;
}
export type CategoryCreatedEvent = TypedEvent<
  [string, string],
  CategoryCreatedEventObject
>;

export type CategoryCreatedEventFilter = TypedEventFilter<CategoryCreatedEvent>;

export interface ContractDeactivatedEventObject {
  name: string;
  contractAddress: string;
}
export type ContractDeactivatedEvent = TypedEvent<
  [string, string],
  ContractDeactivatedEventObject
>;

export type ContractDeactivatedEventFilter =
  TypedEventFilter<ContractDeactivatedEvent>;

export interface ContractReactivatedEventObject {
  name: string;
  contractAddress: string;
}
export type ContractReactivatedEvent = TypedEvent<
  [string, string],
  ContractReactivatedEventObject
>;

export type ContractReactivatedEventFilter =
  TypedEventFilter<ContractReactivatedEvent>;

export interface ContractRegisteredEventObject {
  name: string;
  contractAddress: string;
  version: BigNumber;
  description: string;
}
export type ContractRegisteredEvent = TypedEvent<
  [string, string, BigNumber, string],
  ContractRegisteredEventObject
>;

export type ContractRegisteredEventFilter =
  TypedEventFilter<ContractRegisteredEvent>;

export interface ContractUpdatedEventObject {
  name: string;
  oldAddress: string;
  newAddress: string;
  newVersion: BigNumber;
}
export type ContractUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  ContractUpdatedEventObject
>;

export type ContractUpdatedEventFilter = TypedEventFilter<ContractUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchRegisterContracts(
      names: PromiseOrValue<BytesLike>[],
      addresses: PromiseOrValue<string>[],
      versions: PromiseOrValue<BigNumberish>[],
      descriptions: PromiseOrValue<string>[],
      categories: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCategory(
      category: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getAllCategories(overrides?: CallOverrides): Promise<[string[]]>;

    getAllContracts(overrides?: CallOverrides): Promise<[string[]]>;

    getContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractCategory(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractInfo(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string, string] & {
        contractAddress: string;
        version: BigNumber;
        deployedAt: BigNumber;
        isActive: boolean;
        description: string;
        codeHash: string;
      }
    >;

    getContractName(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractVersions(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getContractsByCategory(
      category: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMultipleContracts(
      names: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRegistryStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalContracts: BigNumber;
        activeContracts: BigNumber;
        totalCategories: BigNumber;
        totalVersions: BigNumber;
      }
    >;

    isContractActive(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    reactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerContract(
      name: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      category: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateContract(
      name: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      newVersion: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  batchRegisterContracts(
    names: PromiseOrValue<BytesLike>[],
    addresses: PromiseOrValue<string>[],
    versions: PromiseOrValue<BigNumberish>[],
    descriptions: PromiseOrValue<string>[],
    categories: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCategory(
    category: PromiseOrValue<BytesLike>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateContract(
    name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveContracts(overrides?: CallOverrides): Promise<string[]>;

  getAllCategories(overrides?: CallOverrides): Promise<string[]>;

  getAllContracts(overrides?: CallOverrides): Promise<string[]>;

  getContract(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractCategory(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractInfo(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, string, string] & {
      contractAddress: string;
      version: BigNumber;
      deployedAt: BigNumber;
      isActive: boolean;
      description: string;
      codeHash: string;
    }
  >;

  getContractName(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractVersions(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getContractsByCategory(
    category: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMultipleContracts(
    names: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRegistryStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalContracts: BigNumber;
      activeContracts: BigNumber;
      totalCategories: BigNumber;
      totalVersions: BigNumber;
    }
  >;

  isContractActive(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  reactivateContract(
    name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerContract(
    name: PromiseOrValue<BytesLike>,
    contractAddress: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    category: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateContract(
    name: PromiseOrValue<BytesLike>,
    newAddress: PromiseOrValue<string>,
    newVersion: PromiseOrValue<BigNumberish>,
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyContract(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    batchRegisterContracts(
      names: PromiseOrValue<BytesLike>[],
      addresses: PromiseOrValue<string>[],
      versions: PromiseOrValue<BigNumberish>[],
      descriptions: PromiseOrValue<string>[],
      categories: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createCategory(
      category: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveContracts(overrides?: CallOverrides): Promise<string[]>;

    getAllCategories(overrides?: CallOverrides): Promise<string[]>;

    getAllContracts(overrides?: CallOverrides): Promise<string[]>;

    getContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractCategory(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractInfo(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string, string] & {
        contractAddress: string;
        version: BigNumber;
        deployedAt: BigNumber;
        isActive: boolean;
        description: string;
        codeHash: string;
      }
    >;

    getContractName(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractVersions(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getContractsByCategory(
      category: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMultipleContracts(
      names: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRegistryStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalContracts: BigNumber;
        activeContracts: BigNumber;
        totalCategories: BigNumber;
        totalVersions: BigNumber;
      }
    >;

    isContractActive(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    reactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerContract(
      name: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      category: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateContract(
      name: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      newVersion: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CategoryCreated(bytes32,string)"(
      category?: PromiseOrValue<BytesLike> | null,
      description?: null
    ): CategoryCreatedEventFilter;
    CategoryCreated(
      category?: PromiseOrValue<BytesLike> | null,
      description?: null
    ): CategoryCreatedEventFilter;

    "ContractDeactivated(bytes32,address)"(
      name?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDeactivatedEventFilter;
    ContractDeactivated(
      name?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDeactivatedEventFilter;

    "ContractReactivated(bytes32,address)"(
      name?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractReactivatedEventFilter;
    ContractReactivated(
      name?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractReactivatedEventFilter;

    "ContractRegistered(bytes32,address,uint256,string)"(
      name?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null,
      version?: null,
      description?: null
    ): ContractRegisteredEventFilter;
    ContractRegistered(
      name?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null,
      version?: null,
      description?: null
    ): ContractRegisteredEventFilter;

    "ContractUpdated(bytes32,address,address,uint256)"(
      name?: PromiseOrValue<BytesLike> | null,
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
      newVersion?: null
    ): ContractUpdatedEventFilter;
    ContractUpdated(
      name?: PromiseOrValue<BytesLike> | null,
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
      newVersion?: null
    ): ContractUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    batchRegisterContracts(
      names: PromiseOrValue<BytesLike>[],
      addresses: PromiseOrValue<string>[],
      versions: PromiseOrValue<BigNumberish>[],
      descriptions: PromiseOrValue<string>[],
      categories: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCategory(
      category: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCategories(overrides?: CallOverrides): Promise<BigNumber>;

    getAllContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractCategory(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractInfo(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractName(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractVersions(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractsByCategory(
      category: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipleContracts(
      names: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistryStats(overrides?: CallOverrides): Promise<BigNumber>;

    isContractActive(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    reactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerContract(
      name: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      category: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateContract(
      name: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      newVersion: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchRegisterContracts(
      names: PromiseOrValue<BytesLike>[],
      addresses: PromiseOrValue<string>[],
      versions: PromiseOrValue<BigNumberish>[],
      descriptions: PromiseOrValue<string>[],
      categories: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCategory(
      category: PromiseOrValue<BytesLike>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllCategories(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractCategory(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractInfo(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractName(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractVersions(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractsByCategory(
      category: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultipleContracts(
      names: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistryStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isContractActive(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reactivateContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerContract(
      name: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      category: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateContract(
      name: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      newVersion: PromiseOrValue<BigNumberish>,
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyContract(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
