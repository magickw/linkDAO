import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Users,\n  Globe,\n  MapPin,\n  Monitor,\n  Smartphone,\n  Tablet,\n  TrendingUp,\n  Clock,\n  Eye,\n  ArrowUpRight,\n  ArrowDownRight,\n  RefreshCw,\n  Download,\n  Filter\n} from 'lucide-react';\nimport { GlassPanel } from '@/design-system';\n\ninterface VisitorData {\n  totalVisitors: number;\n  uniqueVisitors: number;\n  pageViews: number;\n  averageSessionDuration: number;\n  bounceRate: number;\n  newVsReturning: {\n    new: number;\n    returning: number;\n  };\n  topPages: Array<{\n    page: string;\n    views: number;\n    uniqueViews: number;\n    avgDuration: number;\n  }>;\n  geographicData: Array<{\n    country: string;\n    city?: string;\n    visitors: number;\n    percentage: number;\n    latitude?: number;\n    longitude?: number;\n  }>;\n  deviceBreakdown: {\n    desktop: number;\n    mobile: number;\n    tablet: number;\n  };\n  browserStats: Array<{\n    browser: string;\n    users: number;\n    percentage: number;\n  }>;\n  realTimeVisitors: number;\n  hourlyTraffic: Array<{\n    hour: number;\n    visitors: number;\n  }>;\n  referrerSources: Array<{\n    source: string;\n    visitors: number;\n    percentage: number;\n  }>;\n}\n\ninterface VisitorAnalyticsProps {\n  className?: string;\n}\n\nexport const VisitorAnalytics: React.FC<VisitorAnalyticsProps> = ({ className }) => {\n  const [data, setData] = useState<VisitorData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState('24h');\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n\n  useEffect(() => {\n    fetchVisitorData();\n  }, [timeRange]);\n\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(() => {\n      fetchVisitorData();\n    }, 30000); // Refresh every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [autoRefresh, timeRange]);\n\n  const fetchVisitorData = async () => {\n    try {\n      setLoading(true);\n\n      const response = await fetch(`/api/analytics/visitor-analytics?timeRange=${timeRange}`);\n      const result = await response.json();\n\n      if (result.success) {\n        setData(result.data);\n        setLastUpdate(new Date());\n      } else {\n        throw new Error(result.error || 'Failed to fetch visitor data');\n      }\n    } catch (error) {\n      console.error('Error fetching visitor data:', error);\n\n      // Fallback to mock data if API fails\n      const mockData: VisitorData = {\n        totalVisitors: 12847,\n        uniqueVisitors: 8923,\n        pageViews: 45213,\n        averageSessionDuration: 187,\n        bounceRate: 34.2,\n        newVsReturning: {\n          new: 6234,\n          returning: 2689\n        },\n        topPages: [\n          { page: '/', views: 8234, uniqueViews: 5432, avgDuration: 145 },\n          { page: '/marketplace', views: 6891, uniqueViews: 4123, avgDuration: 234 },\n          { page: '/analytics', views: 3456, uniqueViews: 2987, avgDuration: 298 },\n          { page: '/messaging', views: 2134, uniqueViews: 1876, avgDuration: 156 },\n          { page: '/admin', views: 987, uniqueViews: 234, avgDuration: 445 }\n        ],\n        geographicData: [\n          { country: 'United States', city: 'New York', visitors: 3421, percentage: 38.3, latitude: 40.7128, longitude: -74.0060 },\n          { country: 'United States', city: 'Los Angeles', visitors: 1876, percentage: 21.0, latitude: 34.0522, longitude: -118.2437 },\n          { country: 'United Kingdom', city: 'London', visitors: 1234, percentage: 13.8, latitude: 51.5074, longitude: -0.1278 },\n          { country: 'Germany', city: 'Berlin', visitors: 876, percentage: 9.8, latitude: 52.5200, longitude: 13.4050 },\n          { country: 'Canada', city: 'Toronto', visitors: 654, percentage: 7.3, latitude: 43.6532, longitude: -79.3832 },\n          { country: 'France', city: 'Paris', visitors: 432, percentage: 4.8, latitude: 48.8566, longitude: 2.3522 },\n          { country: 'Japan', city: 'Tokyo', visitors: 321, percentage: 3.6, latitude: 35.6762, longitude: 139.6503 },\n          { country: 'Australia', city: 'Sydney', visitors: 234, percentage: 2.6, latitude: -33.8688, longitude: 151.2093 }\n        ],\n        deviceBreakdown: {\n          desktop: 4521,\n          mobile: 6789,\n          tablet: 1532\n        },\n        browserStats: [\n          { browser: 'Chrome', users: 5234, percentage: 58.6 },\n          { browser: 'Safari', users: 1876, percentage: 21.0 },\n          { browser: 'Firefox', users: 987, percentage: 11.1 },\n          { browser: 'Edge', users: 543, percentage: 6.1 },\n          { browser: 'Other', users: 283, percentage: 3.2 }\n        ],\n        realTimeVisitors: 142,\n        hourlyTraffic: Array.from({ length: 24 }, (_, i) => ({\n          hour: i,\n          visitors: Math.floor(Math.random() * 200) + 50\n        })),\n        referrerSources: [\n          { source: 'Direct', visitors: 4521, percentage: 50.7 },\n          { source: 'Google Search', visitors: 2134, percentage: 23.9 },\n          { source: 'Social Media', visitors: 1234, percentage: 13.8 },\n          { source: 'Referral Sites', visitors: 876, percentage: 9.8 },\n          { source: 'Email', visitors: 158, percentage: 1.8 }\n        ]\n      };\n\n      setData(mockData);\n      setLastUpdate(new Date());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportData = () => {\n    if (!data) return;\n    \n    const exportData = {\n      ...data,\n      exportedAt: new Date().toISOString(),\n      timeRange\n    };\n    \n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `visitor-analytics-${timeRange}-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading && !data) {\n    return (\n      <div className={`space-y-6 ${className}`}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-300 rounded w-1/4 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-300 rounded\"></div>\n            ))}\n          </div>\n          <div className=\"h-96 bg-gray-300 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!data) return null;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white flex items-center gap-2\">\n            <Eye className=\"w-8 h-8 text-blue-400\" />\n            Visitor Analytics\n          </h1>\n          <p className=\"text-gray-300 mt-1\">\n            Real-time visitor tracking with accurate geographic insights\n          </p>\n          {lastUpdate && (\n            <p className=\"text-sm text-gray-400 mt-1\">\n              Last updated: {lastUpdate.toLocaleTimeString()}\n            </p>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          {/* Time Range Selector */}\n          <select\n            value={timeRange}\n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"bg-gray-800 text-white text-sm rounded px-3 py-2 border border-gray-600\"\n          >\n            <option value=\"1h\">Last Hour</option>\n            <option value=\"24h\">Last 24 Hours</option>\n            <option value=\"7d\">Last 7 Days</option>\n            <option value=\"30d\">Last 30 Days</option>\n            <option value=\"90d\">Last 90 Days</option>\n          </select>\n          \n          {/* Auto Refresh Toggle */}\n          <button\n            onClick={() => setAutoRefresh(!autoRefresh)}\n            className={`flex items-center gap-2 px-3 py-2 text-sm rounded transition-colors ${\n              autoRefresh\n                ? 'bg-green-600 text-white'\n                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n            }`}\n          >\n            <RefreshCw className={`w-4 h-4 ${autoRefresh ? 'animate-spin' : ''}`} />\n            Auto Refresh\n          </button>\n          \n          {/* Manual Refresh */}\n          <button\n            onClick={fetchVisitorData}\n            disabled={loading}\n            className=\"flex items-center gap-2 px-3 py-2 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 disabled:opacity-50 transition-colors\"\n          >\n            <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n            Refresh\n          </button>\n          \n          {/* Export Button */}\n          <button\n            onClick={exportData}\n            className=\"flex items-center gap-2 px-3 py-2 bg-gray-700 text-white text-sm rounded hover:bg-gray-600 transition-colors\"\n          >\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n        </div>\n      </div>\n\n      {/* Real-time Stats */}\n      <GlassPanel className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n            <span className=\"text-white font-medium\">Live Visitors</span>\n          </div>\n          <div className=\"text-2xl font-bold text-green-400\">\n            {data.realTimeVisitors}\n          </div>\n        </div>\n      </GlassPanel>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Visitors\"\n          value={data.totalVisitors.toLocaleString()}\n          icon={Users}\n          color=\"bg-blue-500\"\n          change={12.5}\n          changeType=\"increase\"\n        />\n        \n        <StatCard\n          title=\"Unique Visitors\"\n          value={data.uniqueVisitors.toLocaleString()}\n          icon={Eye}\n          color=\"bg-green-500\"\n          change={8.3}\n          changeType=\"increase\"\n        />\n        \n        <StatCard\n          title=\"Page Views\"\n          value={data.pageViews.toLocaleString()}\n          icon={Monitor}\n          color=\"bg-purple-500\"\n          change={15.7}\n          changeType=\"increase\"\n        />\n        \n        <StatCard\n          title=\"Avg. Session\"\n          value={`${Math.floor(data.averageSessionDuration / 60)}m ${data.averageSessionDuration % 60}s`}\n          icon={Clock}\n          color=\"bg-orange-500\"\n          change={-2.1}\n          changeType=\"decrease\"\n        />\n      </div>\n\n      {/* Geographic Distribution */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <GlassPanel className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n            <Globe className=\"w-5 h-5\" />\n            Geographic Distribution\n          </h3>\n          <div className=\"space-y-3\">\n            {data.geographicData.slice(0, 8).map((location, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4 text-gray-400\" />\n                  <span className=\"text-white\">\n                    {location.city ? `${location.city}, ${location.country}` : location.country}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-gray-300\">{location.visitors.toLocaleString()}</span>\n                  <div className=\"w-16 bg-gray-700 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-500 h-2 rounded-full\"\n                      style={{ width: `${Math.min(location.percentage, 100)}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-sm text-gray-400 w-12 text-right\">\n                    {location.percentage.toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </GlassPanel>\n\n        <GlassPanel className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Device Breakdown</h3>\n          <div className=\"space-y-4\">\n            <DeviceStatBar\n              label=\"Desktop\"\n              count={data.deviceBreakdown.desktop}\n              total={data.deviceBreakdown.desktop + data.deviceBreakdown.mobile + data.deviceBreakdown.tablet}\n              icon={Monitor}\n              color=\"bg-blue-500\"\n            />\n            <DeviceStatBar\n              label=\"Mobile\"\n              count={data.deviceBreakdown.mobile}\n              total={data.deviceBreakdown.desktop + data.deviceBreakdown.mobile + data.deviceBreakdown.tablet}\n              icon={Smartphone}\n              color=\"bg-green-500\"\n            />\n            <DeviceStatBar\n              label=\"Tablet\"\n              count={data.deviceBreakdown.tablet}\n              total={data.deviceBreakdown.desktop + data.deviceBreakdown.mobile + data.deviceBreakdown.tablet}\n              icon={Tablet}\n              color=\"bg-purple-500\"\n            />\n          </div>\n        </GlassPanel>\n      </div>\n\n      {/* Top Pages and Browser Stats */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <GlassPanel className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Top Pages</h3>\n          <div className=\"space-y-3\">\n            {data.topPages.map((page, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\">\n                <div>\n                  <div className=\"text-white font-medium\">{page.page}</div>\n                  <div className=\"text-sm text-gray-400\">\n                    {page.uniqueViews.toLocaleString()} unique views\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-white font-medium\">{page.views.toLocaleString()}</div>\n                  <div className=\"text-sm text-gray-400\">\n                    {Math.floor(page.avgDuration / 60)}m {page.avgDuration % 60}s avg\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </GlassPanel>\n\n        <GlassPanel className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Browser Stats</h3>\n          <div className=\"space-y-3\">\n            {data.browserStats.map((browser, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <span className=\"text-white\">{browser.browser}</span>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-gray-300\">{browser.users.toLocaleString()}</span>\n                  <div className=\"w-16 bg-gray-700 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-500 h-2 rounded-full\"\n                      style={{ width: `${browser.percentage}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-sm text-gray-400 w-12 text-right\">\n                    {browser.percentage.toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </GlassPanel>\n      </div>\n\n      {/* New vs Returning Visitors */}\n      <GlassPanel className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Visitor Type Breakdown</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-green-400 mb-2\">\n              {data.newVsReturning.new.toLocaleString()}\n            </div>\n            <div className=\"text-gray-300\">New Visitors</div>\n            <div className=\"text-sm text-gray-400\">\n              {((data.newVsReturning.new / (data.newVsReturning.new + data.newVsReturning.returning)) * 100).toFixed(1)}%\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-3xl font-bold text-blue-400 mb-2\">\n              {data.newVsReturning.returning.toLocaleString()}\n            </div>\n            <div className=\"text-gray-300\">Returning Visitors</div>\n            <div className=\"text-sm text-gray-400\">\n              {((data.newVsReturning.returning / (data.newVsReturning.new + data.newVsReturning.returning)) * 100).toFixed(1)}%\n            </div>\n          </div>\n        </div>\n      </GlassPanel>\n\n      {/* Traffic Sources */}\n      <GlassPanel className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Traffic Sources</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          {data.referrerSources.map((source, index) => (\n            <div key={index} className=\"text-center p-4 bg-gray-800/50 rounded-lg\">\n              <div className=\"text-xl font-bold text-white mb-1\">\n                {source.visitors.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-300 mb-1\">{source.source}</div>\n              <div className=\"text-xs text-gray-400\">{source.percentage.toFixed(1)}%</div>\n            </div>\n          ))}\n        </div>\n      </GlassPanel>\n    </div>\n  );\n};\n\n// Helper Components\ninterface StatCardProps {\n  title: string;\n  value: string;\n  icon: React.ComponentType<any>;\n  color: string;\n  change?: number;\n  changeType?: 'increase' | 'decrease';\n}\n\nconst StatCard: React.FC<StatCardProps> = ({ \n  title, \n  value, \n  icon: Icon, \n  color, \n  change, \n  changeType \n}) => (\n  <GlassPanel className=\"p-6\">\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <p className=\"text-gray-400 text-sm\">{title}</p>\n        <p className=\"text-2xl font-bold text-white mt-1\">{value}</p>\n        {change && (\n          <p className={`text-sm mt-1 flex items-center gap-1 ${\n            changeType === 'increase' ? 'text-green-400' : 'text-red-400'\n          }`}>\n            {changeType === 'increase' ? (\n              <ArrowUpRight className=\"w-3 h-3\" />\n            ) : (\n              <ArrowDownRight className=\"w-3 h-3\" />\n            )}\n            {changeType === 'increase' ? '+' : ''}{change}% from last period\n          </p>\n        )}\n      </div>\n      <div className={`p-3 rounded-lg ${color}`}>\n        <Icon className=\"w-6 h-6 text-white\" />\n      </div>\n    </div>\n  </GlassPanel>\n);\n\ninterface DeviceStatBarProps {\n  label: string;\n  count: number;\n  total: number;\n  icon: React.ComponentType<any>;\n  color: string;\n}\n\nconst DeviceStatBar: React.FC<DeviceStatBarProps> = ({ \n  label, \n  count, \n  total, \n  icon: Icon, \n  color \n}) => {\n  const percentage = (count / total) * 100;\n  \n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center gap-2\">\n        <Icon className=\"w-4 h-4 text-gray-400\" />\n        <span className=\"text-white\">{label}</span>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <span className=\"text-gray-300\">{count.toLocaleString()}</span>\n        <div className=\"w-16 bg-gray-700 rounded-full h-2\">\n          <div\n            className={`h-2 rounded-full ${color}`}\n            style={{ width: `${percentage}%` }}\n          ></div>\n        </div>\n        <span className=\"text-sm text-gray-400 w-12 text-right\">\n          {percentage.toFixed(1)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default VisitorAnalytics;"