# Artillery.js Load Test Configuration for Admin Dashboard
config:
  target: 'http://localhost:3000'
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 5
      name: "Warm-up"
    
    # Ramp-up phase
    - duration: 120
      arrivalRate: 5
      rampTo: 25
      name: "Ramp-up"
    
    # Sustained load phase
    - duration: 300
      arrivalRate: 25
      name: "Sustained load"
    
    # Peak load phase
    - duration: 180
      arrivalRate: 25
      rampTo: 50
      name: "Peak load"
    
    # Stress test phase
    - duration: 120
      arrivalRate: 50
      rampTo: 100
      name: "Stress test"
    
    # Cool-down phase
    - duration: 60
      arrivalRate: 100
      rampTo: 5
      name: "Cool-down"

  payload:
    path: "./test-data/admin-credentials.csv"
    fields:
      - "email"
      - "password"
      - "token"
    order: sequence
    skipHeader: true

  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
    
  processor: "./load-test-functions.js"

  variables:
    timeRanges:
      - "1h"
      - "6h"
      - "24h"
      - "7d"
      - "30d"
    
    metricTypes:
      - "users"
      - "content"
      - "engagement"
      - "revenue"
      - "system"

scenarios:
  # Admin Dashboard Core Functionality
  - name: "Admin Dashboard Workflow"
    weight: 40
    flow:
      # Authentication
      - post:
          url: "/api/admin/auth/login"
          name: "Admin Login"
          json:
            email: "{{ email }}"
            password: "{{ password }}"
          capture:
            - json: "$.token"
              as: "authToken"
          expect:
            - statusCode: 200
            - hasProperty: "token"

      # Dashboard metrics loading
      - get:
          url: "/api/admin/dashboard/metrics"
          name: "Load Dashboard Metrics"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200
            - hasProperty: "realTimeUsers"
            - hasProperty: "systemHealth"
          think: 2

      # System health check
      - get:
          url: "/api/admin/dashboard/system-health"
          name: "System Health Check"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200
            - hasProperty: "overall"
          think: 1

      # Real-time metrics refresh
      - loop:
          - get:
              url: "/api/admin/dashboard/metrics"
              name: "Refresh Metrics"
              headers:
                Authorization: "Bearer {{ authToken }}"
              expect:
                - statusCode: 200
          - think: 5
        count: 3

  # Analytics and Reporting Load
  - name: "Analytics Dashboard Workflow"
    weight: 30
    flow:
      # Use existing auth token
      - function: "setAuthToken"

      # Load analytics overview
      - get:
          url: "/api/admin/analytics/overview"
          name: "Analytics Overview"
          qs:
            timeRange: "{{ $randomString(timeRanges) }}"
            metrics: "{{ $randomString(metricTypes) }}"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: 200
          think: 3

      # User journey analytics
      - get:
          url: "/api/admin/analytics/user-journey"
          name: "User Journey Analytics"
          qs:
            timeRange: "7d"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: 200
          think: 2

      # Cohort analysis
      - get:
          url: "/api/admin/analytics/cohort-analysis"
          name: "Cohort Analysis"
          qs:
            period: "weekly"
            metric: "retention"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: 200
          think: 4

      # Chart data generation
      - get:
          url: "/api/admin/analytics/chart-data/line"
          name: "Generate Line Chart"
          qs:
            metric: "user_growth"
            timeRange: "30d"
            granularity: "daily"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: 200
          think: 2

  # AI Insights Processing Load
  - name: "AI Insights Workflow"
    weight: 20
    flow:
      - function: "setAuthToken"

      # Generate AI insights
      - post:
          url: "/api/admin/ai-insights/generate"
          name: "Generate AI Insights"
          headers:
            Authorization: "Bearer {{ token }}"
          json:
            analysisType: "predictive"
            timeRange: "30d"
            metrics: ["user_growth", "content_volume"]
          capture:
            - json: "$.jobId"
              as: "jobId"
          expect:
            - statusCode: 202

      # Poll for completion
      - loop:
          - get:
              url: "/api/admin/ai-insights/job/{{ jobId }}"
              name: "Check AI Job Status"
              headers:
                Authorization: "Bearer {{ token }}"
              capture:
                - json: "$.status"
                  as: "jobStatus"
          - think: 2
        whileTrue: "jobStatus !== 'completed'"
        count: 10

      # Anomaly detection
      - post:
          url: "/api/admin/ai-insights/detect-anomalies"
          name: "Detect Anomalies"
          headers:
            Authorization: "Bearer {{ token }}"
          json:
            analysisType: "user_behavior"
            timeRange: "24h"
          expect:
            - statusCode: 200

  # Moderation Workflow Load
  - name: "Moderation Workflow"
    weight: 15
    flow:
      - function: "setAuthToken"

      # Load moderation queue
      - get:
          url: "/api/admin/moderation/queue"
          name: "Load Moderation Queue"
          qs:
            page: 1
            limit: 20
            status: "pending"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: 200
          think: 2

      # Process moderation items
      - loop:
          - get:
              url: "/api/admin/moderation/queue"
              name: "Get Queue Item"
              qs:
                page: "{{ $randomInt(1, 5) }}"
                limit: 10
              headers:
                Authorization: "Bearer {{ token }}"
              capture:
                - json: "$.data[0].id"
                  as: "itemId"
          
          - post:
              url: "/api/admin/moderation/process"
              name: "Process Moderation Item"
              headers:
                Authorization: "Bearer {{ token }}"
              json:
                itemId: "{{ itemId }}"
                action: "{{ $randomString(['approve', 'reject', 'escalate']) }}"
                reason: "Automated load test action"
              expect:
                - statusCode: 200
          
          - think: 1
        count: 3

  # Report Generation Load
  - name: "Report Generation Workflow"
    weight: 10
    flow:
      - function: "setAuthToken"

      # Generate performance report
      - post:
          url: "/api/admin/reports/generate"
          name: "Generate Performance Report"
          headers:
            Authorization: "Bearer {{ token }}"
          json:
            templateId: "performance-monthly"
            parameters:
              timeRange: "30d"
              format: "pdf"
              includeCharts: true
          capture:
            - json: "$.reportId"
              as: "reportId"
          expect:
            - statusCode: 202

      # Check report status
      - loop:
          - get:
              url: "/api/admin/reports/status/{{ reportId }}"
              name: "Check Report Status"
              headers:
                Authorization: "Bearer {{ token }}"
              capture:
                - json: "$.status"
                  as: "reportStatus"
          - think: 3
        whileTrue: "reportStatus !== 'completed'"
        count: 10

      # List existing reports
      - get:
          url: "/api/admin/reports"
          name: "List Reports"
          qs:
            page: 1
            limit: 10
            status: "completed"
          headers:
            Authorization: "Bearer {{ token }}"
          expect:
            - statusCode: 200

  # WebSocket Real-time Updates Load
  - name: "WebSocket Connections"
    weight: 5
    engine: ws
    flow:
      - connect:
          url: "ws://localhost:3000/admin-dashboard"
          headers:
            Authorization: "Bearer {{ token }}"
          
      - send:
          payload: |
            {
              "type": "subscribe",
              "channels": ["metrics", "alerts", "system_health"]
            }
      
      # Keep connection alive and receive updates
      - loop:
          - think: 10
        count: 30
      
      - send:
          payload: |
            {
              "type": "unsubscribe",
              "channels": ["alerts"]
            }
      
      - think: 5

# Performance thresholds and expectations
expect:
  # Response time expectations
  - statusCode: 200
  - contentType: json
  - maxResponseTime: 5000  # 5 seconds max for any request

  # Specific endpoint expectations
  "/api/admin/dashboard/metrics":
    maxResponseTime: 2000  # 2 seconds for dashboard metrics
  
  "/api/admin/analytics/overview":
    maxResponseTime: 5000  # 5 seconds for analytics
  
  "/api/admin/ai-insights/generate":
    maxResponseTime: 1000  # 1 second to accept AI job
  
  "/api/admin/moderation/queue":
    maxResponseTime: 3000  # 3 seconds for moderation queue

# Custom metrics and monitoring
metrics:
  - name: "admin_dashboard_response_time"
    unit: "ms"
    
  - name: "analytics_generation_time"
    unit: "ms"
    
  - name: "ai_insights_processing_time"
    unit: "ms"
    
  - name: "concurrent_admin_users"
    unit: "count"
    
  - name: "websocket_connection_success_rate"
    unit: "percentage"

# Error handling and resilience testing
errors:
  # Simulate network issues
  - probability: 0.02  # 2% chance
    type: "network_timeout"
    
  # Simulate server errors
  - probability: 0.01  # 1% chance
    type: "server_error"
    statusCode: 500
    
  # Simulate authentication failures
  - probability: 0.005  # 0.5% chance
    type: "auth_failure"
    statusCode: 401

# Resource monitoring during load test
monitoring:
  - cpu_usage
  - memory_usage
  - database_connections
  - response_times
  - error_rates
  - websocket_connections